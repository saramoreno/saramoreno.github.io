{"version":3,"file":"088d5a4e-fa5217db97eae250f8f9.js","mappings":"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","sources":["webpack://bonsai-web/./node_modules/@babylonjs/core/Maths/math.vector.js"],"sourcesContent":["import _classCallCheck from \"/Users/sara/Proyectos/bonsai/bonsai-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/sara/Proyectos/bonsai/bonsai-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Scalar } from \"./math.scalar.js\";\nimport { Epsilon } from \"./math.constants.js\";\nimport { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { PerformanceConfigurator } from \"../Engines/performanceConfigurator.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\"; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nvar _ExtractAsInt = function _ExtractAsInt(value) {\n  return parseInt(value.toString().replace(/\\W/g, \"\"));\n};\n/**\n * Class representing a vector containing 2 coordinates\n */\n\n\nexport var Vector2 = /*#__PURE__*/function () {\n  /**\n   * Creates a new Vector2 from the given x and y coordinates\n   * @param x defines the first coordinate\n   * @param y defines the second coordinate\n   */\n  function Vector2() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, Vector2);\n\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Gets a string with the Vector2 coordinates\n   * @returns a string with the Vector2 coordinates\n   */\n\n\n  _createClass(Vector2, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this.x, \" Y: \").concat(this.y, \"}\");\n    }\n    /**\n     * Gets class name\n     * @returns the string \"Vector2\"\n     */\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Vector2\";\n    }\n    /**\n     * Gets current vector hash code\n     * @returns the Vector2 hash code as a number\n     */\n\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this.x);\n\n      var y = _ExtractAsInt(this.y);\n\n      var hash = x;\n      hash = hash * 397 ^ y;\n      return hash;\n    } // Operators\n\n    /**\n     * Sets the Vector2 coordinates in the given array or Float32Array from the given index.\n     * @param array defines the source array\n     * @param index defines the offset in source array\n     * @returns the current Vector2\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[index] = this.x;\n      array[index + 1] = this.y;\n      return this;\n    }\n    /**\n     * Update the current vector from an array\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Vector2.FromArrayToRef(array, index, this);\n      return this;\n    }\n    /**\n     * Copy the current vector to an array\n     * @returns a new array with 2 elements: the Vector2 coordinates.\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var result = new Array();\n      this.toArray(result, 0);\n      return result;\n    }\n    /**\n     * Sets the Vector2 coordinates with the given Vector2 coordinates\n     * @param source defines the source Vector2\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(source) {\n      this.x = source.x;\n      this.y = source.y;\n      return this;\n    }\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * @param x defines the first coordinate\n     * @param y defines the second coordinate\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * @param x defines the first coordinate\n     * @param y defines the second coordinate\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(x, y) {\n      return this.copyFromFloats(x, y);\n    }\n    /**\n     * Add another vector with the current one\n     * @param otherVector defines the other vector\n     * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(otherVector) {\n      return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    }\n    /**\n     * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns the unmodified current Vector2\n     */\n\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(otherVector, result) {\n      result.x = this.x + otherVector.x;\n      result.y = this.y + otherVector.y;\n      return this;\n    }\n    /**\n     * Set the Vector2 coordinates by adding the given Vector2 coordinates\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(otherVector) {\n      this.x += otherVector.x;\n      this.y += otherVector.y;\n      return this;\n    }\n    /**\n     * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"addVector3\",\n    value: function addVector3(otherVector) {\n      return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    }\n    /**\n     * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(otherVector) {\n      return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n    }\n    /**\n     * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns the unmodified current Vector2\n     */\n\n  }, {\n    key: \"subtractToRef\",\n    value: function subtractToRef(otherVector, result) {\n      result.x = this.x - otherVector.x;\n      result.y = this.y - otherVector.y;\n      return this;\n    }\n    /**\n     * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(otherVector) {\n      this.x -= otherVector.x;\n      this.y -= otherVector.y;\n      return this;\n    }\n    /**\n     * Multiplies in place the current Vector2 coordinates by the given ones\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(otherVector) {\n      this.x *= otherVector.x;\n      this.y *= otherVector.y;\n      return this;\n    }\n    /**\n     * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(otherVector) {\n      return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n    }\n    /**\n     * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns the unmodified current Vector2\n     */\n\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(otherVector, result) {\n      result.x = this.x * otherVector.x;\n      result.y = this.y * otherVector.y;\n      return this;\n    }\n    /**\n     * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n     * @param x defines the first coordinate\n     * @param y defines the second coordinate\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"multiplyByFloats\",\n    value: function multiplyByFloats(x, y) {\n      return new Vector2(this.x * x, this.y * y);\n    }\n    /**\n     * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(otherVector) {\n      return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n    }\n    /**\n     * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns the unmodified current Vector2\n     */\n\n  }, {\n    key: \"divideToRef\",\n    value: function divideToRef(otherVector, result) {\n      result.x = this.x / otherVector.x;\n      result.y = this.y / otherVector.y;\n      return this;\n    }\n    /**\n     * Divides the current Vector2 coordinates by the given ones\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"divideInPlace\",\n    value: function divideInPlace(otherVector) {\n      return this.divideToRef(otherVector, this);\n    }\n    /**\n     * Gets a new Vector2 with current Vector2 negated coordinates\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new Vector2(-this.x, -this.y);\n    }\n    /**\n     * Negate this vector in place\n     * @returns this\n     */\n\n  }, {\n    key: \"negateInPlace\",\n    value: function negateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      return this;\n    }\n    /**\n     * Negate the current Vector2 and stores the result in the given vector \"result\" coordinates\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector2\n     */\n\n  }, {\n    key: \"negateToRef\",\n    value: function negateToRef(result) {\n      return result.copyFromFloats(this.x * -1, this.y * -1);\n    }\n    /**\n     * Multiply the Vector2 coordinates by scale\n     * @param scale defines the scaling factor\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(scale) {\n      this.x *= scale;\n      this.y *= scale;\n      return this;\n    }\n    /**\n     * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n     * @param scale defines the scaling factor\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      var result = new Vector2(0, 0);\n      this.scaleToRef(_scale, result);\n      return result;\n    }\n    /**\n     * Scale the current Vector2 values by a factor to a given Vector2\n     * @param scale defines the scale factor\n     * @param result defines the Vector2 object where to store the result\n     * @returns the unmodified current Vector2\n     */\n\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      result.x = this.x * scale;\n      result.y = this.y * scale;\n      return this;\n    }\n    /**\n     * Scale the current Vector2 values by a factor and add the result to a given Vector2\n     * @param scale defines the scale factor\n     * @param result defines the Vector2 object where to store the result\n     * @returns the unmodified current Vector2\n     */\n\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      result.x += this.x * scale;\n      result.y += this.y * scale;\n      return this;\n    }\n    /**\n     * Gets a boolean if two vectors are equals\n     * @param otherVector defines the other vector\n     * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherVector) {\n      return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n    }\n    /**\n     * Gets a boolean if two vectors are equals (using an epsilon value)\n     * @param otherVector defines the other vector\n     * @param epsilon defines the minimal distance to consider equality\n     * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n     */\n\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherVector) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);\n    }\n    /**\n     * Gets a new Vector2 from current Vector2 floored values\n     * eg (1.2, 2.31) returns (1, 2)\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new Vector2(Math.floor(this.x), Math.floor(this.y));\n    }\n    /**\n     * Gets a new Vector2 from current Vector2 fractional values\n     * eg (1.2, 2.31) returns (0.2, 0.31)\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"fract\",\n    value: function fract() {\n      return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n    }\n    /**\n     * Rotate the current vector into a given result vector\n     * @param angle defines the rotation angle\n     * @param result defines the result vector where to store the rotated vector\n     * @returns the current vector\n     */\n\n  }, {\n    key: \"rotateToRef\",\n    value: function rotateToRef(angle, result) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      result.x = cos * this.x - sin * this.y;\n      result.y = sin * this.x + cos * this.y;\n      return this;\n    } // Properties\n\n    /**\n     * Gets the length of the vector\n     * @returns the vector length (float)\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    /**\n     * Gets the vector squared length\n     * @returns the vector squared length (float)\n     */\n\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this.x * this.x + this.y * this.y;\n    } // Methods\n\n    /**\n     * Normalize the vector\n     * @returns the current updated Vector2\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      Vector2.NormalizeToRef(this, this);\n      return this;\n    }\n    /**\n     * Gets a new Vector2 copied from the Vector2\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vector2(this.x, this.y);\n    } // Statics\n\n    /**\n     * Gets a new Vector2(0, 0)\n     * @returns a new Vector2\n     */\n\n  }], [{\n    key: \"Zero\",\n    value: function Zero() {\n      return new Vector2(0, 0);\n    }\n    /**\n     * Gets a new Vector2(1, 1)\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"One\",\n    value: function One() {\n      return new Vector2(1, 1);\n    }\n    /**\n     * Gets a zero Vector2 that must not be updated\n     */\n\n  }, {\n    key: \"ZeroReadOnly\",\n    get: function get() {\n      return Vector2._ZeroReadOnly;\n    }\n    /**\n     * Gets a new Vector2 set from the given index element of the given array\n     * @param array defines the data source\n     * @param offset defines the offset in the data source\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return new Vector2(array[offset], array[offset + 1]);\n    }\n    /**\n     * Sets \"result\" from the given index element of the given array\n     * @param array defines the data source\n     * @param offset defines the offset in the data source\n     * @param result defines the target vector\n     */\n\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n    }\n    /**\n     * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n     * @param value1 defines 1st point of control\n     * @param value2 defines 2nd point of control\n     * @param value3 defines 3rd point of control\n     * @param value4 defines 4th point of control\n     * @param amount defines the interpolation factor\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"CatmullRom\",\n    value: function CatmullRom(value1, value2, value3, value4, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n      var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n      return new Vector2(x, y);\n    }\n    /**\n     * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\n     * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\n     * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n     * @param value defines the value to clamp\n     * @param min defines the lower limit\n     * @param max defines the upper limit\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Clamp\",\n    value: function Clamp(value, min, max) {\n      var x = value.x;\n      x = x > max.x ? max.x : x;\n      x = x < min.x ? min.x : x;\n      var y = value.y;\n      y = y > max.y ? max.y : y;\n      y = y < min.y ? min.y : y;\n      return new Vector2(x, y);\n    }\n    /**\n     * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\"\n     * @param value1 defines the 1st control point\n     * @param tangent1 defines the outgoing tangent\n     * @param value2 defines the 2nd control point\n     * @param tangent2 defines the incoming tangent\n     * @param amount defines the interpolation factor\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Hermite\",\n    value: function Hermite(value1, tangent1, value2, tangent2, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n      var part2 = -2.0 * cubed + 3.0 * squared;\n      var part3 = cubed - 2.0 * squared + amount;\n      var part4 = cubed - squared;\n      var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n      var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n      return new Vector2(x, y);\n    }\n    /**\n     * Returns a new Vector2 which is the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @returns 1st derivative\n     */\n\n  }, {\n    key: \"Hermite1stDerivative\",\n    value: function Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n      var result = Vector2.Zero();\n      this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n      return result;\n    }\n    /**\n     * Returns a new Vector2 which is the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @param result define where the derivative will be stored\n     */\n\n  }, {\n    key: \"Hermite1stDerivativeToRef\",\n    value: function Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n      var t2 = time * time;\n      result.x = (t2 - time) * 6 * value1.x + (3 * t2 - 4 * time + 1) * tangent1.x + (-t2 + time) * 6 * value2.x + (3 * t2 - 2 * time) * tangent2.x;\n      result.y = (t2 - time) * 6 * value1.y + (3 * t2 - 4 * time + 1) * tangent1.y + (-t2 + time) * 6 * value2.y + (3 * t2 - 2 * time) * tangent2.y;\n    }\n    /**\n     * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n     * @param start defines the start vector\n     * @param end defines the end vector\n     * @param amount defines the interpolation factor\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Lerp\",\n    value: function Lerp(start, end, amount) {\n      var x = start.x + (end.x - start.x) * amount;\n      var y = start.y + (end.y - start.y) * amount;\n      return new Vector2(x, y);\n    }\n    /**\n     * Gets the dot product of the vector \"left\" and the vector \"right\"\n     * @param left defines first vector\n     * @param right defines second vector\n     * @returns the dot product (float)\n     */\n\n  }, {\n    key: \"Dot\",\n    value: function Dot(left, right) {\n      return left.x * right.x + left.y * right.y;\n    }\n    /**\n     * Returns a new Vector2 equal to the normalized given vector\n     * @param vector defines the vector to normalize\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Normalize\",\n    value: function Normalize(vector) {\n      var newVector = Vector2.Zero();\n      this.NormalizeToRef(vector, newVector);\n      return newVector;\n    }\n    /**\n     * Normalize a given vector into a second one\n     * @param vector defines the vector to normalize\n     * @param result defines the vector where to store the result\n     */\n\n  }, {\n    key: \"NormalizeToRef\",\n    value: function NormalizeToRef(vector, result) {\n      var len = vector.length();\n\n      if (len === 0) {\n        return;\n      }\n\n      result.x = vector.x / len;\n      result.y = vector.y / len;\n    }\n    /**\n     * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n     * @param left defines 1st vector\n     * @param right defines 2nd vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Minimize\",\n    value: function Minimize(left, right) {\n      var x = left.x < right.x ? left.x : right.x;\n      var y = left.y < right.y ? left.y : right.y;\n      return new Vector2(x, y);\n    }\n    /**\n     * Gets a new Vector2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n     * @param left defines 1st vector\n     * @param right defines 2nd vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Maximize\",\n    value: function Maximize(left, right) {\n      var x = left.x > right.x ? left.x : right.x;\n      var y = left.y > right.y ? left.y : right.y;\n      return new Vector2(x, y);\n    }\n    /**\n     * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n     * @param vector defines the vector to transform\n     * @param transformation defines the matrix to apply\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Transform\",\n    value: function Transform(vector, transformation) {\n      var r = Vector2.Zero();\n      Vector2.TransformToRef(vector, transformation, r);\n      return r;\n    }\n    /**\n     * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n     * @param vector defines the vector to transform\n     * @param transformation defines the matrix to apply\n     * @param result defines the target vector\n     */\n\n  }, {\n    key: \"TransformToRef\",\n    value: function TransformToRef(vector, transformation, result) {\n      var m = transformation.m;\n      var x = vector.x * m[0] + vector.y * m[4] + m[12];\n      var y = vector.x * m[1] + vector.y * m[5] + m[13];\n      result.x = x;\n      result.y = y;\n    }\n    /**\n     * Determines if a given vector is included in a triangle\n     * @param p defines the vector to test\n     * @param p0 defines 1st triangle point\n     * @param p1 defines 2nd triangle point\n     * @param p2 defines 3rd triangle point\n     * @returns true if the point \"p\" is in the triangle defined by the vectors \"p0\", \"p1\", \"p2\"\n     */\n\n  }, {\n    key: \"PointInTriangle\",\n    value: function PointInTriangle(p, p0, p1, p2) {\n      var a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n      var sign = a < 0 ? -1 : 1;\n      var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n      var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n      return s > 0 && t > 0 && s + t < 2 * a * sign;\n    }\n    /**\n     * Gets the distance between the vectors \"value1\" and \"value2\"\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @returns the distance between vectors\n     */\n\n  }, {\n    key: \"Distance\",\n    value: function Distance(value1, value2) {\n      return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n    }\n    /**\n     * Returns the squared distance between the vectors \"value1\" and \"value2\"\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @returns the squared distance between vectors\n     */\n\n  }, {\n    key: \"DistanceSquared\",\n    value: function DistanceSquared(value1, value2) {\n      var x = value1.x - value2.x;\n      var y = value1.y - value2.y;\n      return x * x + y * y;\n    }\n    /**\n     * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @returns a new Vector2\n     */\n\n  }, {\n    key: \"Center\",\n    value: function Center(value1, value2) {\n      return Vector2.CenterToRef(value1, value2, Vector2.Zero());\n    }\n    /**\n     * Gets the center of the vectors \"value1\" and \"value2\" and stores the result in the vector \"ref\"\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @param ref defines third vector\n     * @returns ref\n     */\n\n  }, {\n    key: \"CenterToRef\",\n    value: function CenterToRef(value1, value2, ref) {\n      return ref.copyFromFloats((value1.x + value2.x) / 2, (value1.y + value2.y) / 2);\n    }\n    /**\n     * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n     * @param p defines the middle point\n     * @param segA defines one point of the segment\n     * @param segB defines the other point of the segment\n     * @returns the shortest distance\n     */\n\n  }, {\n    key: \"DistanceOfPointFromSegment\",\n    value: function DistanceOfPointFromSegment(p, segA, segB) {\n      var l2 = Vector2.DistanceSquared(segA, segB);\n\n      if (l2 === 0.0) {\n        return Vector2.Distance(p, segA);\n      }\n\n      var v = segB.subtract(segA);\n      var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n      var proj = segA.add(v.multiplyByFloats(t, t));\n      return Vector2.Distance(p, proj);\n    }\n  }]);\n\n  return Vector2;\n}();\nVector2._ZeroReadOnly = Vector2.Zero();\n/**\n * Class used to store (x,y,z) vector representation\n * A Vector3 is the main object used in 3D geometry\n * It can represent either the coordinates of a point the space, either a direction\n * Reminder: js uses a left handed forward facing system\n * Example Playground - Overview - https://playground.babylonjs.com/#R1F8YU\n */\n\nexport var Vector3 = /*#__PURE__*/function () {\n  /**\n   * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n   * @param x defines the first coordinates (on X axis)\n   * @param y defines the second coordinates (on Y axis)\n   * @param z defines the third coordinates (on Z axis)\n   */\n  function Vector3() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Vector3);\n\n    /** @internal */\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n  /** Gets or sets the x coordinate */\n\n\n  _createClass(Vector3, [{\n    key: \"x\",\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the y coordinate */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the z coordinate */\n\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    }\n    /**\n     * Creates a string representation of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#67\n     * @returns a string with the Vector3 coordinates.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this._x, \" Y: \").concat(this._y, \" Z: \").concat(this._z, \"}\");\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Vector3\"\n     */\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Vector3\";\n    }\n    /**\n     * Creates the Vector3 hash code\n     * @returns a number which tends to be unique between Vector3 instances\n     */\n\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this._x);\n\n      var y = _ExtractAsInt(this._y);\n\n      var z = _ExtractAsInt(this._z);\n\n      var hash = x;\n      hash = hash * 397 ^ y;\n      hash = hash * 397 ^ z;\n      return hash;\n    } // Operators\n\n    /**\n     * Creates an array containing three elements : the coordinates of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#10\n     * @returns a new array of numbers\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var result = [];\n      this.toArray(result, 0);\n      return result;\n    }\n    /**\n     * Populates the given array or Float32Array from the given index with the successive coordinates of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#65\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[index] = this._x;\n      array[index + 1] = this._y;\n      array[index + 2] = this._z;\n      return this;\n    }\n    /**\n     * Update the current vector from an array\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#24\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Vector3.FromArrayToRef(array, index, this);\n      return this;\n    }\n    /**\n     * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#66\n     * @returns a new Quaternion object, computed from the Vector3 coordinates\n     */\n\n  }, {\n    key: \"toQuaternion\",\n    value: function toQuaternion() {\n      return Quaternion.RotationYawPitchRoll(this._y, this._x, this._z);\n    }\n    /**\n     * Adds the given vector to the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#4\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(otherVector) {\n      return this.addInPlaceFromFloats(otherVector._x, otherVector._y, otherVector._z);\n    }\n    /**\n     * Adds the given coordinates to the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#5\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"addInPlaceFromFloats\",\n    value: function addInPlaceFromFloats(x, y, z) {\n      this.x += x;\n      this.y += y;\n      this.z += z;\n      return this;\n    }\n    /**\n     * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#3\n     * @param otherVector defines the second operand\n     * @returns the resulting Vector3\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(otherVector) {\n      return new Vector3(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n    }\n    /**\n     * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#6\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(otherVector, result) {\n      return result.copyFromFloats(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n    }\n    /**\n     * Subtract the given vector from the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#61\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(otherVector) {\n      this.x -= otherVector._x;\n      this.y -= otherVector._y;\n      this.z -= otherVector._z;\n      return this;\n    }\n    /**\n     * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#60\n     * @param otherVector defines the second operand\n     * @returns the resulting Vector3\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(otherVector) {\n      return new Vector3(this._x - otherVector._x, this._y - otherVector._y, this._z - otherVector._z);\n    }\n    /**\n     * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#63\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"subtractToRef\",\n    value: function subtractToRef(otherVector, result) {\n      return this.subtractFromFloatsToRef(otherVector._x, otherVector._y, otherVector._z, result);\n    }\n    /**\n     * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#62\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the resulting Vector3\n     */\n\n  }, {\n    key: \"subtractFromFloats\",\n    value: function subtractFromFloats(x, y, z) {\n      return new Vector3(this._x - x, this._y - y, this._z - z);\n    }\n    /**\n     * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#64\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"subtractFromFloatsToRef\",\n    value: function subtractFromFloatsToRef(x, y, z, result) {\n      return result.copyFromFloats(this._x - x, this._y - y, this._z - z);\n    }\n    /**\n     * Gets a new Vector3 set with the current Vector3 negated coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#35\n     * @returns a new Vector3\n     */\n\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new Vector3(-this._x, -this._y, -this._z);\n    }\n    /**\n     * Negate this vector in place\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#36\n     * @returns this\n     */\n\n  }, {\n    key: \"negateInPlace\",\n    value: function negateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      this.z *= -1;\n      return this;\n    }\n    /**\n     * Negate the current Vector3 and stores the result in the given vector \"result\" coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#37\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"negateToRef\",\n    value: function negateToRef(result) {\n      return result.copyFromFloats(this._x * -1, this._y * -1, this._z * -1);\n    }\n    /**\n     * Multiplies the Vector3 coordinates by the float \"scale\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#56\n     * @param scale defines the multiplier factor\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(scale) {\n      this.x *= scale;\n      this.y *= scale;\n      this.z *= scale;\n      return this;\n    }\n    /**\n     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#53\n     * @param scale defines the multiplier factor\n     * @returns a new Vector3\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(_scale2) {\n      return new Vector3(this._x * _scale2, this._y * _scale2, this._z * _scale2);\n    }\n    /**\n     * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#57\n     * @param scale defines the multiplier factor\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      return result.copyFromFloats(this._x * scale, this._y * scale, this._z * scale);\n    }\n    /**\n     * Rotates the vector using the given unit quaternion and stores the new vector in result\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#9\n     * @param q the unit quaternion representing the rotation\n     * @param result the output vector\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"applyRotationQuaternionToRef\",\n    value: function applyRotationQuaternionToRef(q, result) {\n      var ix = q.w * this.x + q.y * this.z - q.z * this.y;\n      var iy = q.w * this.y + q.z * this.x - q.x * this.z;\n      var iz = q.w * this.z + q.x * this.y - q.y * this.x;\n      var iw = -q.x * this.x - q.y * this.y - q.z * this.z;\n      result.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n      result.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n      result.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n      return result;\n    }\n    /**\n     * Rotates the vector in place using the given unit quaternion\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#8\n     * @param q the unit quaternion representing the rotation\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"applyRotationQuaternionInPlace\",\n    value: function applyRotationQuaternionInPlace(q) {\n      return this.applyRotationQuaternionToRef(q, this);\n    }\n    /**\n     * Rotates the vector using the given unit quaternion and returns the new vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#7\n     * @param q the unit quaternion representing the rotation\n     * @returns a new Vector3\n     */\n\n  }, {\n    key: \"applyRotationQuaternion\",\n    value: function applyRotationQuaternion(q) {\n      return this.applyRotationQuaternionToRef(q, Vector3.Zero());\n    }\n    /**\n     * Scale the current Vector3 values by a factor and add the result to a given Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#55\n     * @param scale defines the scale factor\n     * @param result defines the Vector3 object where to store the result\n     * @returns the unmodified current Vector3\n     */\n\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      return result.addInPlaceFromFloats(this._x * scale, this._y * scale, this._z * scale);\n    }\n    /**\n     * Projects the current point Vector3 to a plane along a ray starting from a specified origin and passing through the current point Vector3.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#48\n     * @param plane defines the plane to project to\n     * @param origin defines the origin of the projection ray\n     * @returns the projected vector3\n     */\n\n  }, {\n    key: \"projectOnPlane\",\n    value: function projectOnPlane(plane, origin) {\n      var result = Vector3.Zero();\n      this.projectOnPlaneToRef(plane, origin, result);\n      return result;\n    }\n    /**\n     * Projects the current point Vector3 to a plane along a ray starting from a specified origin and passing through the current point Vector3.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#49\n     * @param plane defines the plane to project to\n     * @param origin defines the origin of the projection ray\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"projectOnPlaneToRef\",\n    value: function projectOnPlaneToRef(plane, origin, result) {\n      var n = plane.normal;\n      var d = plane.d;\n      var V = MathTmp.Vector3[0]; // ray direction\n\n      this.subtractToRef(origin, V);\n      V.normalize();\n      var denom = Vector3.Dot(V, n); //When the ray is close to parallel to the plane return infinity vector\n\n      if (Math.abs(denom) < Math.pow(10, -10)) {\n        result.setAll(Infinity);\n      } else {\n        var t = -(Vector3.Dot(origin, n) + d) / denom; // P = P0 + t*V\n\n        var scaledV = V.scaleInPlace(t);\n        origin.addToRef(scaledV, result);\n      }\n    }\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#19\n     * @param otherVector defines the second operand\n     * @returns true if both vectors are equals\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherVector) {\n      return otherVector && this._x === otherVector._x && this._y === otherVector._y && this._z === otherVector._z;\n    }\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#21\n     * @param otherVector defines the second operand\n     * @param epsilon defines the minimal distance to define values as equals\n     * @returns true if both vectors are distant less than epsilon\n     */\n\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherVector) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherVector && Scalar.WithinEpsilon(this._x, otherVector._x, epsilon) && Scalar.WithinEpsilon(this._y, otherVector._y, epsilon) && Scalar.WithinEpsilon(this._z, otherVector._z, epsilon);\n    }\n    /**\n     * Returns true if the current Vector3 coordinates equals the given floats\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#20\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns true if both vectors are equal\n     */\n\n  }, {\n    key: \"equalsToFloats\",\n    value: function equalsToFloats(x, y, z) {\n      return this._x === x && this._y === y && this._z === z;\n    }\n    /**\n     * Multiplies the current Vector3 coordinates by the given ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#32\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(otherVector) {\n      this.x *= otherVector._x;\n      this.y *= otherVector._y;\n      this.z *= otherVector._z;\n      return this;\n    }\n    /**\n     * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#31\n     * @param otherVector defines the second operand\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(otherVector) {\n      return this.multiplyByFloats(otherVector._x, otherVector._y, otherVector._z);\n    }\n    /**\n     * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#33\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(otherVector, result) {\n      return result.copyFromFloats(this._x * otherVector._x, this._y * otherVector._y, this._z * otherVector._z);\n    }\n    /**\n     * Returns a new Vector3 set with the result of the multiplication of the current Vector3 coordinates by the given floats\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#34\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"multiplyByFloats\",\n    value: function multiplyByFloats(x, y, z) {\n      return new Vector3(this._x * x, this._y * y, this._z * z);\n    }\n    /**\n     * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#16\n     * @param otherVector defines the second operand\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(otherVector) {\n      return new Vector3(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n    }\n    /**\n     * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#18\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"divideToRef\",\n    value: function divideToRef(otherVector, result) {\n      return result.copyFromFloats(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n    }\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#17\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"divideInPlace\",\n    value: function divideInPlace(otherVector) {\n      return this.divideToRef(otherVector, this);\n    }\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#29\n     * @param other defines the second operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"minimizeInPlace\",\n    value: function minimizeInPlace(other) {\n      return this.minimizeInPlaceFromFloats(other._x, other._y, other._z);\n    }\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#27\n     * @param other defines the second operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"maximizeInPlace\",\n    value: function maximizeInPlace(other) {\n      return this.maximizeInPlaceFromFloats(other._x, other._y, other._z);\n    }\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#30\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"minimizeInPlaceFromFloats\",\n    value: function minimizeInPlaceFromFloats(x, y, z) {\n      if (x < this._x) {\n        this.x = x;\n      }\n\n      if (y < this._y) {\n        this.y = y;\n      }\n\n      if (z < this._z) {\n        this.z = z;\n      }\n\n      return this;\n    }\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#28\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"maximizeInPlaceFromFloats\",\n    value: function maximizeInPlaceFromFloats(x, y, z) {\n      if (x > this._x) {\n        this.x = x;\n      }\n\n      if (y > this._y) {\n        this.y = y;\n      }\n\n      if (z > this._z) {\n        this.z = z;\n      }\n\n      return this;\n    }\n    /**\n     * Due to float precision, scale of a mesh could be uniform but float values are off by a small fraction\n     * Check if is non uniform within a certain amount of decimal places to account for this\n     * @param epsilon the amount the values can differ\n     * @returns if the the vector is non uniform to a certain number of decimal places\n     */\n\n  }, {\n    key: \"isNonUniformWithinEpsilon\",\n    value: function isNonUniformWithinEpsilon(epsilon) {\n      var absX = Math.abs(this._x);\n      var absY = Math.abs(this._y);\n\n      if (!Scalar.WithinEpsilon(absX, absY, epsilon)) {\n        return true;\n      }\n\n      var absZ = Math.abs(this._z);\n\n      if (!Scalar.WithinEpsilon(absX, absZ, epsilon)) {\n        return true;\n      }\n\n      if (!Scalar.WithinEpsilon(absY, absZ, epsilon)) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n     */\n\n  }, {\n    key: \"isNonUniform\",\n    get: function get() {\n      var absX = Math.abs(this._x);\n      var absY = Math.abs(this._y);\n\n      if (absX !== absY) {\n        return true;\n      }\n\n      var absZ = Math.abs(this._z);\n\n      if (absX !== absZ) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Gets a new Vector3 from current Vector3 floored values\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#22\n     * @returns a new Vector3\n     */\n\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new Vector3(Math.floor(this._x), Math.floor(this._y), Math.floor(this._z));\n    }\n    /**\n     * Gets a new Vector3 from current Vector3 fractional values\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#23\n     * @returns a new Vector3\n     */\n\n  }, {\n    key: \"fract\",\n    value: function fract() {\n      return new Vector3(this._x - Math.floor(this._x), this._y - Math.floor(this._y), this._z - Math.floor(this._z));\n    } // Properties\n\n    /**\n     * Gets the length of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#25\n     * @returns the length of the Vector3\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\n    }\n    /**\n     * Gets the squared length of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#26\n     * @returns squared length of the Vector3\n     */\n\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this._x * this._x + this._y * this._y + this._z * this._z;\n    }\n    /**\n     * Gets a boolean indicating if the vector contains a zero in one of its components\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#1\n     */\n\n  }, {\n    key: \"hasAZeroComponent\",\n    get: function get() {\n      return this._x * this._y * this._z === 0;\n    }\n    /**\n     * Normalize the current Vector3.\n     * Please note that this is an in place operation.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#122\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      return this.normalizeFromLength(this.length());\n    }\n    /**\n     * Reorders the x y z properties of the vector in place\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#44\n     * @param order new ordering of the properties (eg. for vector 1,2,3 with \"ZYX\" will produce 3,2,1)\n     * @returns the current updated vector\n     */\n\n  }, {\n    key: \"reorderInPlace\",\n    value: function reorderInPlace(order) {\n      var _this = this;\n\n      order = order.toLowerCase();\n\n      if (order === \"xyz\") {\n        return this;\n      }\n\n      MathTmp.Vector3[0].copyFrom(this);\n      [\"x\", \"y\", \"z\"].forEach(function (val, i) {\n        _this[val] = MathTmp.Vector3[0][order[i]];\n      });\n      return this;\n    }\n    /**\n     * Rotates the vector around 0,0,0 by a quaternion\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#47\n     * @param quaternion the rotation quaternion\n     * @param result vector to store the result\n     * @returns the resulting vector\n     */\n\n  }, {\n    key: \"rotateByQuaternionToRef\",\n    value: function rotateByQuaternionToRef(quaternion, result) {\n      quaternion.toRotationMatrix(MathTmp.Matrix[0]);\n      Vector3.TransformCoordinatesToRef(this, MathTmp.Matrix[0], result);\n      return result;\n    }\n    /**\n     * Rotates a vector around a given point\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#46\n     * @param quaternion the rotation quaternion\n     * @param point the point to rotate around\n     * @param result vector to store the result\n     * @returns the resulting vector\n     */\n\n  }, {\n    key: \"rotateByQuaternionAroundPointToRef\",\n    value: function rotateByQuaternionAroundPointToRef(quaternion, point, result) {\n      this.subtractToRef(point, MathTmp.Vector3[0]);\n      MathTmp.Vector3[0].rotateByQuaternionToRef(quaternion, MathTmp.Vector3[0]);\n      point.addToRef(MathTmp.Vector3[0], result);\n      return result;\n    }\n    /**\n     * Returns a new Vector3 as the cross product of the current vector and the \"other\" one\n     * The cross product is then orthogonal to both current and \"other\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#14\n     * @param other defines the right operand\n     * @returns the cross product\n     */\n\n  }, {\n    key: \"cross\",\n    value: function cross(other) {\n      return Vector3.Cross(this, other);\n    }\n    /**\n     * Normalize the current Vector3 with the given input length.\n     * Please note that this is an in place operation.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#123\n     * @param len the length of the vector\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"normalizeFromLength\",\n    value: function normalizeFromLength(len) {\n      if (len === 0 || len === 1.0) {\n        return this;\n      }\n\n      return this.scaleInPlace(1.0 / len);\n    }\n    /**\n     * Normalize the current Vector3 to a new vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#124\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"normalizeToNew\",\n    value: function normalizeToNew() {\n      var normalized = new Vector3(0, 0, 0);\n      this.normalizeToRef(normalized);\n      return normalized;\n    }\n    /**\n     * Normalize the current Vector3 to the reference\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#125\n     * @param reference define the Vector3 to update\n     * @returns the updated Vector3\n     */\n\n  }, {\n    key: \"normalizeToRef\",\n    value: function normalizeToRef(reference) {\n      var len = this.length();\n\n      if (len === 0 || len === 1.0) {\n        return reference.copyFromFloats(this._x, this._y, this._z);\n      }\n\n      return this.scaleToRef(1.0 / len, reference);\n    }\n    /**\n     * Creates a new Vector3 copied from the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#11\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vector3(this._x, this._y, this._z);\n    }\n    /**\n     * Copies the given vector coordinates to the current Vector3 ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#12\n     * @param source defines the source Vector3\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(source) {\n      return this.copyFromFloats(source._x, source._y, source._z);\n    }\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#13\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    }\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#58\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(x, y, z) {\n      return this.copyFromFloats(x, y, z);\n    }\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#59\n     * @param v defines the x, y and z coordinates of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(v) {\n      this.x = this.y = this.z = v;\n      return this;\n    } // Statics\n\n    /**\n     * Get the clip factor between two vectors\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#126\n     * @param vector0 defines the first operand\n     * @param vector1 defines the second operand\n     * @param axis defines the axis to use\n     * @param size defines the size along the axis\n     * @returns the clip factor\n     */\n\n  }], [{\n    key: \"GetClipFactor\",\n    value: function GetClipFactor(vector0, vector1, axis, size) {\n      var d0 = Vector3.Dot(vector0, axis) - size;\n      var d1 = Vector3.Dot(vector1, axis) - size;\n      var s = d0 / (d0 - d1);\n      return s;\n    }\n    /**\n     * Get angle between two vectors\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#86\n     * @param vector0 the starting point\n     * @param vector1 the ending point\n     * @param normal direction of the normal\n     * @returns the angle between vector0 and vector1\n     */\n\n  }, {\n    key: \"GetAngleBetweenVectors\",\n    value: function GetAngleBetweenVectors(vector0, vector1, normal) {\n      var v0 = vector0.normalizeToRef(MathTmp.Vector3[1]);\n      var v1 = vector1.normalizeToRef(MathTmp.Vector3[2]);\n      var dot = Vector3.Dot(v0, v1); // Vectors are normalized so dot will be in [-1, 1] (aside precision issues enough to break the result which explains the below clamp)\n\n      dot = Scalar.Clamp(dot, -1, 1);\n      var angle = Math.acos(dot);\n      var n = MathTmp.Vector3[3];\n      Vector3.CrossToRef(v0, v1, n);\n\n      if (Vector3.Dot(n, normal) > 0) {\n        return isNaN(angle) ? 0 : angle;\n      }\n\n      return isNaN(angle) ? -Math.PI : -Math.acos(dot);\n    }\n    /**\n     * Get angle between two vectors projected on a plane\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#87\n     * Expectation compute time: 0.01 ms (median) and 0.02 ms (percentile 95%)\n     * @param vector0 angle between vector0 and vector1\n     * @param vector1 angle between vector0 and vector1\n     * @param normal Normal of the projection plane\n     * @returns the angle in radians (float) between vector0 and vector1 projected on the plane with the specified normal\n     */\n\n  }, {\n    key: \"GetAngleBetweenVectorsOnPlane\",\n    value: function GetAngleBetweenVectorsOnPlane(vector0, vector1, normal) {\n      MathTmp.Vector3[0].copyFrom(vector0);\n      var v0 = MathTmp.Vector3[0];\n      MathTmp.Vector3[1].copyFrom(vector1);\n      var v1 = MathTmp.Vector3[1];\n      MathTmp.Vector3[2].copyFrom(normal);\n      var vNormal = MathTmp.Vector3[2];\n      var right = MathTmp.Vector3[3];\n      var forward = MathTmp.Vector3[4];\n      v0.normalize();\n      v1.normalize();\n      vNormal.normalize();\n      Vector3.CrossToRef(vNormal, v0, right);\n      Vector3.CrossToRef(right, vNormal, forward);\n      var angle = Math.atan2(Vector3.Dot(v1, right), Vector3.Dot(v1, forward));\n      return Scalar.NormalizeRadians(angle);\n    }\n    /**\n     * Slerp between two vectors. See also `SmoothToRef`\n     * Slerp is a spherical linear interpolation\n     * giving a slow in and out effect\n     * Example Playground 1 https://playground.babylonjs.com/#R1F8YU#108\n     * Example Playground 2 https://playground.babylonjs.com/#R1F8YU#109\n     * @param vector0 Start vector\n     * @param vector1 End vector\n     * @param slerp amount (will be clamped between 0 and 1)\n     * @param result The slerped vector\n     */\n\n  }, {\n    key: \"SlerpToRef\",\n    value: function SlerpToRef(vector0, vector1, slerp, result) {\n      slerp = Scalar.Clamp(slerp, 0, 1);\n      var vector0Dir = MathTmp.Vector3[0];\n      var vector1Dir = MathTmp.Vector3[1];\n      vector0Dir.copyFrom(vector0);\n      var vector0Length = vector0Dir.length();\n      vector0Dir.normalizeFromLength(vector0Length);\n      vector1Dir.copyFrom(vector1);\n      var vector1Length = vector1Dir.length();\n      vector1Dir.normalizeFromLength(vector1Length);\n      var dot = Vector3.Dot(vector0Dir, vector1Dir);\n      var scale0;\n      var scale1;\n\n      if (dot < 1 - Epsilon) {\n        var omega = Math.acos(dot);\n        var invSin = 1 / Math.sin(omega);\n        scale0 = Math.sin((1 - slerp) * omega) * invSin;\n        scale1 = Math.sin(slerp * omega) * invSin;\n      } else {\n        // Use linear interpolation\n        scale0 = 1 - slerp;\n        scale1 = slerp;\n      }\n\n      vector0Dir.scaleInPlace(scale0);\n      vector1Dir.scaleInPlace(scale1);\n      result.copyFrom(vector0Dir).addInPlace(vector1Dir);\n      result.scaleInPlace(Scalar.Lerp(vector0Length, vector1Length, slerp));\n    }\n    /**\n     * Smooth interpolation between two vectors using Slerp\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#110\n     * @param source source vector\n     * @param goal goal vector\n     * @param deltaTime current interpolation frame\n     * @param lerpTime total interpolation time\n     * @param result the smoothed vector\n     */\n\n  }, {\n    key: \"SmoothToRef\",\n    value: function SmoothToRef(source, goal, deltaTime, lerpTime, result) {\n      Vector3.SlerpToRef(source, goal, lerpTime === 0 ? 1 : deltaTime / lerpTime, result);\n    }\n    /**\n     * Returns a new Vector3 set from the index \"offset\" of the given array\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#83\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n    }\n    /**\n     * Returns a new Vector3 set from the index \"offset\" of the given Float32Array\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @returns the new Vector3\n     * @deprecated Please use FromArray instead.\n     */\n\n  }, {\n    key: \"FromFloatArray\",\n    value: function FromFloatArray(array, offset) {\n      return Vector3.FromArray(array, offset);\n    }\n    /**\n     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#84\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      result.z = array[offset + 2];\n    }\n    /**\n     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given Float32Array\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @param result defines the Vector3 where to store the result\n     * @deprecated Please use FromArrayToRef instead.\n     */\n\n  }, {\n    key: \"FromFloatArrayToRef\",\n    value: function FromFloatArrayToRef(array, offset, result) {\n      return Vector3.FromArrayToRef(array, offset, result);\n    }\n    /**\n     * Sets the given vector \"result\" with the given floats.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#85\n     * @param x defines the x coordinate of the source\n     * @param y defines the y coordinate of the source\n     * @param z defines the z coordinate of the source\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"FromFloatsToRef\",\n    value: function FromFloatsToRef(x, y, z, result) {\n      result.copyFromFloats(x, y, z);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n     * @returns a new empty Vector3\n     */\n\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Vector3(0.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n     * @returns a new Vector3\n     */\n\n  }, {\n    key: \"One\",\n    value: function One() {\n      return new Vector3(1.0, 1.0, 1.0);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new up Vector3\n     */\n\n  }, {\n    key: \"Up\",\n    value: function Up() {\n      return new Vector3(0.0, 1.0, 0.0);\n    }\n    /**\n     * Gets an up Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"UpReadOnly\",\n    get: function get() {\n      return Vector3._UpReadOnly;\n    }\n    /**\n     * Gets a down Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"DownReadOnly\",\n    get: function get() {\n      return Vector3._DownReadOnly;\n    }\n    /**\n     * Gets a right Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"RightReadOnly\",\n    get: function get() {\n      return Vector3._RightReadOnly;\n    }\n    /**\n     * Gets a left Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"LeftReadOnly\",\n    get: function get() {\n      return Vector3._LeftReadOnly;\n    }\n    /**\n     * Gets a forward Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"LeftHandedForwardReadOnly\",\n    get: function get() {\n      return Vector3._LeftHandedForwardReadOnly;\n    }\n    /**\n     * Gets a forward Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"RightHandedForwardReadOnly\",\n    get: function get() {\n      return Vector3._RightHandedForwardReadOnly;\n    }\n    /**\n     * Gets a zero Vector3 that must not be updated\n     */\n\n  }, {\n    key: \"ZeroReadOnly\",\n    get: function get() {\n      return Vector3._ZeroReadOnly;\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new down Vector3\n     */\n\n  }, {\n    key: \"Down\",\n    value: function Down() {\n      return new Vector3(0.0, -1.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @param rightHandedSystem is the scene right-handed (negative z)\n     * @returns a new forward Vector3\n     */\n\n  }, {\n    key: \"Forward\",\n    value: function Forward() {\n      var rightHandedSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Vector3(0.0, 0.0, rightHandedSystem ? -1.0 : 1.0);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @param rightHandedSystem is the scene right-handed (negative-z)\n     * @returns a new Backward Vector3\n     */\n\n  }, {\n    key: \"Backward\",\n    value: function Backward() {\n      var rightHandedSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Vector3(0.0, 0.0, rightHandedSystem ? 1.0 : -1.0);\n    }\n    /**\n     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new right Vector3\n     */\n\n  }, {\n    key: \"Right\",\n    value: function Right() {\n      return new Vector3(1.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new left Vector3\n     */\n\n  }, {\n    key: \"Left\",\n    value: function Left() {\n      return new Vector3(-1.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n     * This method computes transformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#111\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @returns the transformed Vector3\n     */\n\n  }, {\n    key: \"TransformCoordinates\",\n    value: function TransformCoordinates(vector, transformation) {\n      var result = Vector3.Zero();\n      Vector3.TransformCoordinatesToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n     * This method computes transformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#113\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"TransformCoordinatesToRef\",\n    value: function TransformCoordinatesToRef(vector, transformation, result) {\n      Vector3.TransformCoordinatesFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n     * This method computes transformed coordinates only, not transformed direction vectors\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#115\n     * @param x define the x coordinate of the source vector\n     * @param y define the y coordinate of the source vector\n     * @param z define the z coordinate of the source vector\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"TransformCoordinatesFromFloatsToRef\",\n    value: function TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n      var m = transformation.m;\n      var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n      var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n      var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n      var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n      result.x = rx * rw;\n      result.y = ry * rw;\n      result.z = rz * rw;\n    }\n    /**\n     * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#112\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"TransformNormal\",\n    value: function TransformNormal(vector, transformation) {\n      var result = Vector3.Zero();\n      Vector3.TransformNormalToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#114\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"TransformNormalToRef\",\n    value: function TransformNormalToRef(vector, transformation, result) {\n      this.TransformNormalFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#116\n     * @param x define the x coordinate of the source vector\n     * @param y define the y coordinate of the source vector\n     * @param z define the z coordinate of the source vector\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"TransformNormalFromFloatsToRef\",\n    value: function TransformNormalFromFloatsToRef(x, y, z, transformation, result) {\n      var m = transformation.m;\n      result.x = x * m[0] + y * m[4] + z * m[8];\n      result.y = x * m[1] + y * m[5] + z * m[9];\n      result.z = x * m[2] + y * m[6] + z * m[10];\n    }\n    /**\n     * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#69\n     * @param value1 defines the first control point\n     * @param value2 defines the second control point\n     * @param value3 defines the third control point\n     * @param value4 defines the fourth control point\n     * @param amount defines the amount on the spline to use\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"CatmullRom\",\n    value: function CatmullRom(value1, value2, value3, value4, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var x = 0.5 * (2.0 * value2._x + (-value1._x + value3._x) * amount + (2.0 * value1._x - 5.0 * value2._x + 4.0 * value3._x - value4._x) * squared + (-value1._x + 3.0 * value2._x - 3.0 * value3._x + value4._x) * cubed);\n      var y = 0.5 * (2.0 * value2._y + (-value1._y + value3._y) * amount + (2.0 * value1._y - 5.0 * value2._y + 4.0 * value3._y - value4._y) * squared + (-value1._y + 3.0 * value2._y - 3.0 * value3._y + value4._y) * cubed);\n      var z = 0.5 * (2.0 * value2._z + (-value1._z + value3._z) * amount + (2.0 * value1._z - 5.0 * value2._z + 4.0 * value3._z - value4._z) * squared + (-value1._z + 3.0 * value2._z - 3.0 * value3._z + value4._z) * cubed);\n      return new Vector3(x, y, z);\n    }\n    /**\n     * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#76\n     * @param value defines the current value\n     * @param min defines the lower range value\n     * @param max defines the upper range value\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Clamp\",\n    value: function Clamp(value, min, max) {\n      var v = new Vector3();\n      Vector3.ClampToRef(value, min, max, v);\n      return v;\n    }\n    /**\n     * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#77\n     * @param value defines the current value\n     * @param min defines the lower range value\n     * @param max defines the upper range value\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"ClampToRef\",\n    value: function ClampToRef(value, min, max, result) {\n      var x = value._x;\n      x = x > max._x ? max._x : x;\n      x = x < min._x ? min._x : x;\n      var y = value._y;\n      y = y > max._y ? max._y : y;\n      y = y < min._y ? min._y : y;\n      var z = value._z;\n      z = z > max._z ? max._z : z;\n      z = z < min._z ? min._z : z;\n      result.copyFromFloats(x, y, z);\n    }\n    /**\n     * Checks if a given vector is inside a specific range\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#75\n     * @param v defines the vector to test\n     * @param min defines the minimum range\n     * @param max defines the maximum range\n     */\n\n  }, {\n    key: \"CheckExtends\",\n    value: function CheckExtends(v, min, max) {\n      min.minimizeInPlace(v);\n      max.maximizeInPlace(v);\n    }\n    /**\n     * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#89\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent vector\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent vector\n     * @param amount defines the amount on the interpolation spline (between 0 and 1)\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Hermite\",\n    value: function Hermite(value1, tangent1, value2, tangent2, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n      var part2 = -2.0 * cubed + 3.0 * squared;\n      var part3 = cubed - 2.0 * squared + amount;\n      var part4 = cubed - squared;\n      var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n      var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n      var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n      return new Vector3(x, y, z);\n    }\n    /**\n     * Returns a new Vector3 which is the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#90\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @returns 1st derivative\n     */\n\n  }, {\n    key: \"Hermite1stDerivative\",\n    value: function Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n      var result = Vector3.Zero();\n      this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n      return result;\n    }\n    /**\n     * Update a Vector3 with the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#91\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @param result define where to store the derivative\n     */\n\n  }, {\n    key: \"Hermite1stDerivativeToRef\",\n    value: function Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n      var t2 = time * time;\n      result.x = (t2 - time) * 6 * value1.x + (3 * t2 - 4 * time + 1) * tangent1.x + (-t2 + time) * 6 * value2.x + (3 * t2 - 2 * time) * tangent2.x;\n      result.y = (t2 - time) * 6 * value1.y + (3 * t2 - 4 * time + 1) * tangent1.y + (-t2 + time) * 6 * value2.y + (3 * t2 - 2 * time) * tangent2.y;\n      result.z = (t2 - time) * 6 * value1.z + (3 * t2 - 4 * time + 1) * tangent1.z + (-t2 + time) * 6 * value2.z + (3 * t2 - 2 * time) * tangent2.z;\n    }\n    /**\n     * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#95\n     * @param start defines the start value\n     * @param end defines the end value\n     * @param amount max defines amount between both (between 0 and 1)\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Lerp\",\n    value: function Lerp(start, end, amount) {\n      var result = new Vector3(0, 0, 0);\n      Vector3.LerpToRef(start, end, amount, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#93\n     * @param start defines the start value\n     * @param end defines the end value\n     * @param amount max defines amount between both (between 0 and 1)\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"LerpToRef\",\n    value: function LerpToRef(start, end, amount, result) {\n      result.x = start._x + (end._x - start._x) * amount;\n      result.y = start._y + (end._y - start._y) * amount;\n      result.z = start._z + (end._z - start._z) * amount;\n    }\n    /**\n     * Returns the dot product (float) between the vectors \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#82\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @returns the dot product\n     */\n\n  }, {\n    key: \"Dot\",\n    value: function Dot(left, right) {\n      return left._x * right._x + left._y * right._y + left._z * right._z;\n    }\n    /**\n     * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n     * The cross product is then orthogonal to both \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#15\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @returns the cross product\n     */\n\n  }, {\n    key: \"Cross\",\n    value: function Cross(left, right) {\n      var result = Vector3.Zero();\n      Vector3.CrossToRef(left, right, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n     * The cross product is then orthogonal to both \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#78\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"CrossToRef\",\n    value: function CrossToRef(left, right, result) {\n      var x = left._y * right._z - left._z * right._y;\n      var y = left._z * right._x - left._x * right._z;\n      var z = left._x * right._y - left._y * right._x;\n      result.copyFromFloats(x, y, z);\n    }\n    /**\n     * Returns a new Vector3 as the normalization of the given vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#98\n     * @param vector defines the Vector3 to normalize\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Normalize\",\n    value: function Normalize(vector) {\n      var result = Vector3.Zero();\n      Vector3.NormalizeToRef(vector, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the normalization of the given first vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#98\n     * @param vector defines the Vector3 to normalize\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"NormalizeToRef\",\n    value: function NormalizeToRef(vector, result) {\n      vector.normalizeToRef(result);\n    }\n    /**\n     * Project a Vector3 onto screen space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#101\n     * @param vector defines the Vector3 to project\n     * @param world defines the world matrix to use\n     * @param transform defines the transform (view x projection) matrix to use\n     * @param viewport defines the screen viewport to use\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Project\",\n    value: function Project(vector, world, transform, viewport) {\n      var result = new Vector3();\n      Vector3.ProjectToRef(vector, world, transform, viewport, result);\n      return result;\n    }\n    /**\n     * Project a Vector3 onto screen space to reference\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#102\n     * @param vector defines the Vector3 to project\n     * @param world defines the world matrix to use\n     * @param transform defines the transform (view x projection) matrix to use\n     * @param viewport defines the screen viewport to use\n     * @param result the vector in which the screen space will be stored\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"ProjectToRef\",\n    value: function ProjectToRef(vector, world, transform, viewport, result) {\n      var cw = viewport.width;\n      var ch = viewport.height;\n      var cx = viewport.x;\n      var cy = viewport.y;\n      var viewportMatrix = MathTmp.Matrix[1];\n      Matrix.FromValuesToRef(cw / 2.0, 0, 0, 0, 0, -ch / 2.0, 0, 0, 0, 0, 0.5, 0, cx + cw / 2.0, ch / 2.0 + cy, 0.5, 1, viewportMatrix);\n      var matrix = MathTmp.Matrix[0];\n      world.multiplyToRef(transform, matrix);\n      matrix.multiplyToRef(viewportMatrix, matrix);\n      Vector3.TransformCoordinatesToRef(vector, matrix, result);\n      return result;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"_UnprojectFromInvertedMatrixToRef\",\n    value: function _UnprojectFromInvertedMatrixToRef(source, matrix, result) {\n      Vector3.TransformCoordinatesToRef(source, matrix, result);\n      var m = matrix.m;\n      var num = source._x * m[3] + source._y * m[7] + source._z * m[11] + m[15];\n\n      if (Scalar.WithinEpsilon(num, 1.0)) {\n        result.scaleInPlace(1.0 / num);\n      }\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#121\n     * @param source defines the screen space Vector3 to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param transform defines the transform (view x projection) matrix to use\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"UnprojectFromTransform\",\n    value: function UnprojectFromTransform(source, viewportWidth, viewportHeight, world, transform) {\n      return this.Unproject(source, viewportWidth, viewportHeight, world, transform, Matrix.IdentityReadOnly);\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#117\n     * @param source defines the screen space Vector3 to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Unproject\",\n    value: function Unproject(source, viewportWidth, viewportHeight, world, view, projection) {\n      var result = Vector3.Zero();\n      Vector3.UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result);\n      return result;\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#119\n     * @param source defines the screen space Vector3 to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"UnprojectToRef\",\n    value: function UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result) {\n      Vector3.UnprojectFloatsToRef(source._x, source._y, source._z, viewportWidth, viewportHeight, world, view, projection, result);\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#120\n     * @param sourceX defines the screen space x coordinate to use\n     * @param sourceY defines the screen space y coordinate to use\n     * @param sourceZ defines the screen space z coordinate to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     * @param result defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"UnprojectFloatsToRef\",\n    value: function UnprojectFloatsToRef(sourceX, sourceY, sourceZ, viewportWidth, viewportHeight, world, view, projection, result) {\n      var _EngineStore$LastCrea;\n\n      var matrix = MathTmp.Matrix[0];\n      world.multiplyToRef(view, matrix);\n      matrix.multiplyToRef(projection, matrix);\n      matrix.invert();\n      var screenSource = MathTmp.Vector3[0];\n      screenSource.x = sourceX / viewportWidth * 2 - 1;\n      screenSource.y = -(sourceY / viewportHeight * 2 - 1);\n\n      if ((_EngineStore$LastCrea = EngineStore.LastCreatedEngine) !== null && _EngineStore$LastCrea !== void 0 && _EngineStore$LastCrea.isNDCHalfZRange) {\n        screenSource.z = sourceZ;\n      } else {\n        screenSource.z = 2 * sourceZ - 1.0;\n      }\n\n      Vector3._UnprojectFromInvertedMatrixToRef(screenSource, matrix, result);\n    }\n    /**\n     * Gets the minimal coordinate values between two Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#97\n     * @param left defines the first operand\n     * @param right defines the second operand\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Minimize\",\n    value: function Minimize(left, right) {\n      var min = left.clone();\n      min.minimizeInPlace(right);\n      return min;\n    }\n    /**\n     * Gets the maximal coordinate values between two Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#96\n     * @param left defines the first operand\n     * @param right defines the second operand\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Maximize\",\n    value: function Maximize(left, right) {\n      var max = left.clone();\n      max.maximizeInPlace(right);\n      return max;\n    }\n    /**\n     * Returns the distance between the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#81\n     * @param value1 defines the first operand\n     * @param value2 defines the second operand\n     * @returns the distance\n     */\n\n  }, {\n    key: \"Distance\",\n    value: function Distance(value1, value2) {\n      return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n    }\n    /**\n     * Returns the squared distance between the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#80\n     * @param value1 defines the first operand\n     * @param value2 defines the second operand\n     * @returns the squared distance\n     */\n\n  }, {\n    key: \"DistanceSquared\",\n    value: function DistanceSquared(value1, value2) {\n      var x = value1._x - value2._x;\n      var y = value1._y - value2._y;\n      var z = value1._z - value2._z;\n      return x * x + y * y + z * z;\n    }\n    /**\n     * Projects \"vector\" on the triangle determined by its extremities \"p0\", \"p1\" and \"p2\", stores the result in \"ref\"\n     * and returns the distance to the projected point.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#104\n     * From http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.104.4264&rep=rep1&type=pdf\n     *\n     * @param vector the vector to get distance from\n     * @param p0 extremity of the triangle\n     * @param p1 extremity of the triangle\n     * @param p2 extremity of the triangle\n     * @param ref variable to store the result to\n     * @returns The distance between \"ref\" and \"vector\"\n     */\n\n  }, {\n    key: \"ProjectOnTriangleToRef\",\n    value: function ProjectOnTriangleToRef(vector, p0, p1, p2, ref) {\n      var p1p0 = MathTmp.Vector3[0];\n      var p2p0 = MathTmp.Vector3[1];\n      var p2p1 = MathTmp.Vector3[2];\n      var normal = MathTmp.Vector3[3];\n      var vectorp0 = MathTmp.Vector3[4]; // Triangle vectors\n\n      p1.subtractToRef(p0, p1p0);\n      p2.subtractToRef(p0, p2p0);\n      p2.subtractToRef(p1, p2p1);\n      var p1p0L = p1p0.length();\n      var p2p0L = p2p0.length();\n      var p2p1L = p2p1.length();\n\n      if (p1p0L < Epsilon || p2p0L < Epsilon || p2p1L < Epsilon) {\n        // This is a degenerate triangle. As we assume this is part of a non-degenerate mesh,\n        // we will find a better intersection later.\n        // Let's just return one of the extremities\n        ref.copyFrom(p0);\n        return Vector3.Distance(vector, p0);\n      } // Compute normal and vector to p0\n\n\n      vector.subtractToRef(p0, vectorp0);\n      Vector3.CrossToRef(p1p0, p2p0, normal);\n      var nl = normal.length();\n\n      if (nl < Epsilon) {\n        // Extremities are aligned, we are back on the case of a degenerate triangle\n        ref.copyFrom(p0);\n        return Vector3.Distance(vector, p0);\n      }\n\n      normal.normalizeFromLength(nl);\n      var l = vectorp0.length();\n\n      if (l < Epsilon) {\n        // Vector is p0\n        ref.copyFrom(p0);\n        return 0;\n      }\n\n      vectorp0.normalizeFromLength(l); // Project to \"proj\" that lies on the triangle plane\n\n      var cosA = Vector3.Dot(normal, vectorp0);\n      var projVector = MathTmp.Vector3[5];\n      var proj = MathTmp.Vector3[6];\n      projVector.copyFrom(normal).scaleInPlace(-l * cosA);\n      proj.copyFrom(vector).addInPlace(projVector); // Compute barycentric coordinates (v0, v1 and v2 are axis from barycenter to extremities)\n\n      var v0 = MathTmp.Vector3[4];\n      var v1 = MathTmp.Vector3[5];\n      var v2 = MathTmp.Vector3[7];\n      var tmp = MathTmp.Vector3[8];\n      v0.copyFrom(p1p0).scaleInPlace(1 / p1p0L);\n      tmp.copyFrom(p2p0).scaleInPlace(1 / p2p0L);\n      v0.addInPlace(tmp).scaleInPlace(-1);\n      v1.copyFrom(p1p0).scaleInPlace(-1 / p1p0L);\n      tmp.copyFrom(p2p1).scaleInPlace(1 / p2p1L);\n      v1.addInPlace(tmp).scaleInPlace(-1);\n      v2.copyFrom(p2p1).scaleInPlace(-1 / p2p1L);\n      tmp.copyFrom(p2p0).scaleInPlace(-1 / p2p0L);\n      v2.addInPlace(tmp).scaleInPlace(-1); // Determines which edge of the triangle is closest to \"proj\"\n\n      var projP = MathTmp.Vector3[9];\n      var dot;\n      projP.copyFrom(proj).subtractInPlace(p0);\n      Vector3.CrossToRef(v0, projP, tmp);\n      dot = Vector3.Dot(tmp, normal);\n      var s0 = dot;\n      projP.copyFrom(proj).subtractInPlace(p1);\n      Vector3.CrossToRef(v1, projP, tmp);\n      dot = Vector3.Dot(tmp, normal);\n      var s1 = dot;\n      projP.copyFrom(proj).subtractInPlace(p2);\n      Vector3.CrossToRef(v2, projP, tmp);\n      dot = Vector3.Dot(tmp, normal);\n      var s2 = dot;\n      var edge = MathTmp.Vector3[10];\n      var e0, e1;\n\n      if (s0 > 0 && s1 < 0) {\n        edge.copyFrom(p1p0);\n        e0 = p0;\n        e1 = p1;\n      } else if (s1 > 0 && s2 < 0) {\n        edge.copyFrom(p2p1);\n        e0 = p1;\n        e1 = p2;\n      } else {\n        edge.copyFrom(p2p0).scaleInPlace(-1);\n        e0 = p2;\n        e1 = p0;\n      } // Determines if \"proj\" lies inside the triangle\n\n\n      var tmp2 = MathTmp.Vector3[9];\n      var tmp3 = MathTmp.Vector3[4];\n      e0.subtractToRef(proj, tmp);\n      e1.subtractToRef(proj, tmp2);\n      Vector3.CrossToRef(tmp, tmp2, tmp3);\n      var isOutside = Vector3.Dot(tmp3, normal) < 0; // If inside, we already found the projected point, \"proj\"\n\n      if (!isOutside) {\n        ref.copyFrom(proj);\n        return Math.abs(l * cosA);\n      } // If outside, we find \"triProj\", the closest point from \"proj\" on the closest edge\n\n\n      var r = MathTmp.Vector3[5];\n      Vector3.CrossToRef(edge, tmp3, r);\n      r.normalize();\n      var e0proj = MathTmp.Vector3[9];\n      e0proj.copyFrom(e0).subtractInPlace(proj);\n      var e0projL = e0proj.length();\n\n      if (e0projL < Epsilon) {\n        // Proj is e0\n        ref.copyFrom(e0);\n        return Vector3.Distance(vector, e0);\n      }\n\n      e0proj.normalizeFromLength(e0projL);\n      var cosG = Vector3.Dot(r, e0proj);\n      var triProj = MathTmp.Vector3[7];\n      triProj.copyFrom(proj).addInPlace(r.scaleInPlace(e0projL * cosG)); // Now we clamp \"triProj\" so it lies between e0 and e1\n\n      tmp.copyFrom(triProj).subtractInPlace(e0);\n      l = edge.length();\n      edge.normalizeFromLength(l);\n      var t = Vector3.Dot(tmp, edge) / Math.max(l, Epsilon);\n      t = Scalar.Clamp(t, 0, 1);\n      triProj.copyFrom(e0).addInPlace(edge.scaleInPlace(t * l));\n      ref.copyFrom(triProj);\n      return Vector3.Distance(vector, triProj);\n    }\n    /**\n     * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#72\n     * @param value1 defines the first operand\n     * @param value2 defines the second operand\n     * @returns the new Vector3\n     */\n\n  }, {\n    key: \"Center\",\n    value: function Center(value1, value2) {\n      return Vector3.CenterToRef(value1, value2, Vector3.Zero());\n    }\n    /**\n     * Gets the center of the vectors \"value1\" and \"value2\" and stores the result in the vector \"ref\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#73\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @param ref defines third vector\n     * @returns ref\n     */\n\n  }, {\n    key: \"CenterToRef\",\n    value: function CenterToRef(value1, value2, ref) {\n      return ref.copyFromFloats((value1._x + value2._x) / 2, (value1._y + value2._y) / 2, (value1._z + value2._z) / 2);\n    }\n    /**\n     * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n     * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n     * to something in order to rotate it from its local system to the given target system\n     * Note: axis1, axis2 and axis3 are normalized during this operation\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#106\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @returns a new Vector3\n     * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/target_align\n     */\n\n  }, {\n    key: \"RotationFromAxis\",\n    value: function RotationFromAxis(axis1, axis2, axis3) {\n      var rotation = Vector3.Zero();\n      Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n      return rotation;\n    }\n    /**\n     * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#107\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @param ref defines the Vector3 where to store the result\n     */\n\n  }, {\n    key: \"RotationFromAxisToRef\",\n    value: function RotationFromAxisToRef(axis1, axis2, axis3, ref) {\n      var quat = MathTmp.Quaternion[0];\n      Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n      quat.toEulerAnglesToRef(ref);\n    }\n  }]);\n\n  return Vector3;\n}();\nVector3._UpReadOnly = Vector3.Up();\nVector3._DownReadOnly = Vector3.Down();\nVector3._LeftHandedForwardReadOnly = Vector3.Forward(false);\nVector3._RightHandedForwardReadOnly = Vector3.Forward(true);\nVector3._RightReadOnly = Vector3.Right();\nVector3._LeftReadOnly = Vector3.Left();\nVector3._ZeroReadOnly = Vector3.Zero();\n/**\n * Vector4 class created for EulerAngle class conversion to Quaternion\n */\n\nexport var Vector4 = /*#__PURE__*/function () {\n  /**\n   * Creates a Vector4 object from the given floats.\n   * @param x x value of the vector\n   * @param y y value of the vector\n   * @param z z value of the vector\n   * @param w w value of the vector\n   */\n  function Vector4(\n  /** x value of the vector */\n  x,\n  /** y value of the vector */\n  y,\n  /** z value of the vector */\n  z,\n  /** w value of the vector */\n  w) {\n    _classCallCheck(this, Vector4);\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Returns the string with the Vector4 coordinates.\n   * @returns a string containing all the vector values\n   */\n\n\n  _createClass(Vector4, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this.x, \" Y: \").concat(this.y, \" Z: \").concat(this.z, \" W: \").concat(this.w, \"}\");\n    }\n    /**\n     * Returns the string \"Vector4\".\n     * @returns \"Vector4\"\n     */\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Vector4\";\n    }\n    /**\n     * Returns the Vector4 hash code.\n     * @returns a unique hash code\n     */\n\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this.x);\n\n      var y = _ExtractAsInt(this.y);\n\n      var z = _ExtractAsInt(this.z);\n\n      var w = _ExtractAsInt(this.w);\n\n      var hash = x;\n      hash = hash * 397 ^ y;\n      hash = hash * 397 ^ z;\n      hash = hash * 397 ^ w;\n      return hash;\n    } // Operators\n\n    /**\n     * Returns a new array populated with 4 elements : the Vector4 coordinates.\n     * @returns the resulting array\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var result = new Array();\n      this.toArray(result, 0);\n      return result;\n    }\n    /**\n     * Populates the given array from the given index with the Vector4 coordinates.\n     * @param array array to populate\n     * @param index index of the array to start at (default: 0)\n     * @returns the Vector4.\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(array, index) {\n      if (index === undefined) {\n        index = 0;\n      }\n\n      array[index] = this.x;\n      array[index + 1] = this.y;\n      array[index + 2] = this.z;\n      array[index + 3] = this.w;\n      return this;\n    }\n    /**\n     * Update the current vector from an array\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Vector4.FromArrayToRef(array, index, this);\n      return this;\n    }\n    /**\n     * Adds the given vector to the current Vector4.\n     * @param otherVector the vector to add\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(otherVector) {\n      this.x += otherVector.x;\n      this.y += otherVector.y;\n      this.z += otherVector.z;\n      this.w += otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n     * @param otherVector the vector to add\n     * @returns the resulting vector\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(otherVector) {\n      return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n    }\n    /**\n     * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n     * @param otherVector the vector to add\n     * @param result the vector to store the result\n     * @returns the current Vector4.\n     */\n\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(otherVector, result) {\n      result.x = this.x + otherVector.x;\n      result.y = this.y + otherVector.y;\n      result.z = this.z + otherVector.z;\n      result.w = this.w + otherVector.w;\n      return this;\n    }\n    /**\n     * Subtract in place the given vector from the current Vector4.\n     * @param otherVector the vector to subtract\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(otherVector) {\n      this.x -= otherVector.x;\n      this.y -= otherVector.y;\n      this.z -= otherVector.z;\n      this.w -= otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector the vector to add\n     * @returns the new vector with the result\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(otherVector) {\n      return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector the vector to subtract\n     * @param result the vector to store the result\n     * @returns the current Vector4.\n     */\n\n  }, {\n    key: \"subtractToRef\",\n    value: function subtractToRef(otherVector, result) {\n      result.x = this.x - otherVector.x;\n      result.y = this.y - otherVector.y;\n      result.z = this.z - otherVector.z;\n      result.w = this.w - otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     */\n\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x value to subtract\n     * @param y value to subtract\n     * @param z value to subtract\n     * @param w value to subtract\n     * @returns new vector containing the result\n     */\n\n  }, {\n    key: \"subtractFromFloats\",\n    value: function subtractFromFloats(x, y, z, w) {\n      return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n    }\n    /**\n     * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x value to subtract\n     * @param y value to subtract\n     * @param z value to subtract\n     * @param w value to subtract\n     * @param result the vector to store the result in\n     * @returns the current Vector4.\n     */\n\n  }, {\n    key: \"subtractFromFloatsToRef\",\n    value: function subtractFromFloatsToRef(x, y, z, w, result) {\n      result.x = this.x - x;\n      result.y = this.y - y;\n      result.z = this.z - z;\n      result.w = this.w - w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the current Vector4 negated coordinates.\n     * @returns a new vector with the negated values\n     */\n\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new Vector4(-this.x, -this.y, -this.z, -this.w);\n    }\n    /**\n     * Negate this vector in place\n     * @returns this\n     */\n\n  }, {\n    key: \"negateInPlace\",\n    value: function negateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      this.z *= -1;\n      this.w *= -1;\n      return this;\n    }\n    /**\n     * Negate the current Vector4 and stores the result in the given vector \"result\" coordinates\n     * @param result defines the Vector3 object where to store the result\n     * @returns the current Vector4\n     */\n\n  }, {\n    key: \"negateToRef\",\n    value: function negateToRef(result) {\n      return result.copyFromFloats(this.x * -1, this.y * -1, this.z * -1, this.w * -1);\n    }\n    /**\n     * Multiplies the current Vector4 coordinates by scale (float).\n     * @param scale the number to scale with\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(scale) {\n      this.x *= scale;\n      this.y *= scale;\n      this.z *= scale;\n      this.w *= scale;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale the number to scale with\n     * @returns a new vector with the result\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(_scale3) {\n      return new Vector4(this.x * _scale3, this.y * _scale3, this.z * _scale3, this.w * _scale3);\n    }\n    /**\n     * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale the number to scale with\n     * @param result a vector to store the result in\n     * @returns the current Vector4.\n     */\n\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      result.x = this.x * scale;\n      result.y = this.y * scale;\n      result.z = this.z * scale;\n      result.w = this.w * scale;\n      return this;\n    }\n    /**\n     * Scale the current Vector4 values by a factor and add the result to a given Vector4\n     * @param scale defines the scale factor\n     * @param result defines the Vector4 object where to store the result\n     * @returns the unmodified current Vector4\n     */\n\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      result.x += this.x * scale;\n      result.y += this.y * scale;\n      result.z += this.z * scale;\n      result.w += this.w * scale;\n      return this;\n    }\n    /**\n     * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n     * @param otherVector the vector to compare against\n     * @returns true if they are equal\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherVector) {\n      return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;\n    }\n    /**\n     * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n     * @param otherVector vector to compare against\n     * @param epsilon (Default: very small number)\n     * @returns true if they are equal\n     */\n\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherVector) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) && Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);\n    }\n    /**\n     * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n     * @param x x value to compare against\n     * @param y y value to compare against\n     * @param z z value to compare against\n     * @param w w value to compare against\n     * @returns true if equal\n     */\n\n  }, {\n    key: \"equalsToFloats\",\n    value: function equalsToFloats(x, y, z, w) {\n      return this.x === x && this.y === y && this.z === z && this.w === w;\n    }\n    /**\n     * Multiplies in place the current Vector4 by the given one.\n     * @param otherVector vector to multiple with\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(otherVector) {\n      this.x *= otherVector.x;\n      this.y *= otherVector.y;\n      this.z *= otherVector.z;\n      this.w *= otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector vector to multiple with\n     * @returns resulting new vector\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(otherVector) {\n      return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n    }\n    /**\n     * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector vector to multiple with\n     * @param result vector to store the result\n     * @returns the current Vector4.\n     */\n\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(otherVector, result) {\n      result.x = this.x * otherVector.x;\n      result.y = this.y * otherVector.y;\n      result.z = this.z * otherVector.z;\n      result.w = this.w * otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n     * @param x x value multiply with\n     * @param y y value multiply with\n     * @param z z value multiply with\n     * @param w w value multiply with\n     * @returns resulting new vector\n     */\n\n  }, {\n    key: \"multiplyByFloats\",\n    value: function multiplyByFloats(x, y, z, w) {\n      return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n    }\n    /**\n     * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n     * @param otherVector vector to devide with\n     * @returns resulting new vector\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(otherVector) {\n      return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n    }\n    /**\n     * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n     * @param otherVector vector to devide with\n     * @param result vector to store the result\n     * @returns the current Vector4.\n     */\n\n  }, {\n    key: \"divideToRef\",\n    value: function divideToRef(otherVector, result) {\n      result.x = this.x / otherVector.x;\n      result.y = this.y / otherVector.y;\n      result.z = this.z / otherVector.z;\n      result.w = this.w / otherVector.w;\n      return this;\n    }\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * @param otherVector vector to devide with\n     * @returns the updated Vector3.\n     */\n\n  }, {\n    key: \"divideInPlace\",\n    value: function divideInPlace(otherVector) {\n      return this.divideToRef(otherVector, this);\n    }\n    /**\n     * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n     * @param other defines the second operand\n     * @returns the current updated Vector4\n     */\n\n  }, {\n    key: \"minimizeInPlace\",\n    value: function minimizeInPlace(other) {\n      if (other.x < this.x) {\n        this.x = other.x;\n      }\n\n      if (other.y < this.y) {\n        this.y = other.y;\n      }\n\n      if (other.z < this.z) {\n        this.z = other.z;\n      }\n\n      if (other.w < this.w) {\n        this.w = other.w;\n      }\n\n      return this;\n    }\n    /**\n     * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n     * @param other defines the second operand\n     * @returns the current updated Vector4\n     */\n\n  }, {\n    key: \"maximizeInPlace\",\n    value: function maximizeInPlace(other) {\n      if (other.x > this.x) {\n        this.x = other.x;\n      }\n\n      if (other.y > this.y) {\n        this.y = other.y;\n      }\n\n      if (other.z > this.z) {\n        this.z = other.z;\n      }\n\n      if (other.w > this.w) {\n        this.w = other.w;\n      }\n\n      return this;\n    }\n    /**\n     * Gets a new Vector4 from current Vector4 floored values\n     * @returns a new Vector4\n     */\n\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n    }\n    /**\n     * Gets a new Vector4 from current Vector4 fractional values\n     * @returns a new Vector4\n     */\n\n  }, {\n    key: \"fract\",\n    value: function fract() {\n      return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n    } // Properties\n\n    /**\n     * Returns the Vector4 length (float).\n     * @returns the length\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n    /**\n     * Returns the Vector4 squared length (float).\n     * @returns the length squared\n     */\n\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    } // Methods\n\n    /**\n     * Normalizes in place the Vector4.\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var len = this.length();\n\n      if (len === 0) {\n        return this;\n      }\n\n      return this.scaleInPlace(1.0 / len);\n    }\n    /**\n     * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n     * @returns this converted to a new vector3\n     */\n\n  }, {\n    key: \"toVector3\",\n    value: function toVector3() {\n      return new Vector3(this.x, this.y, this.z);\n    }\n    /**\n     * Returns a new Vector4 copied from the current one.\n     * @returns the new cloned vector\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vector4(this.x, this.y, this.z, this.w);\n    }\n    /**\n     * Updates the current Vector4 with the given one coordinates.\n     * @param source the source vector to copy from\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(source) {\n      this.x = source.x;\n      this.y = source.y;\n      this.z = source.z;\n      this.w = source.w;\n      return this;\n    }\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x float to copy from\n     * @param y float to copy from\n     * @param z float to copy from\n     * @param w float to copy from\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    }\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x float to set from\n     * @param y float to set from\n     * @param z float to set from\n     * @param w float to set from\n     * @returns the updated Vector4.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      return this.copyFromFloats(x, y, z, w);\n    }\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * @param v defines the x, y, z and w coordinates of the operand\n     * @returns the current updated Vector3\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(v) {\n      this.x = this.y = this.z = this.w = v;\n      return this;\n    } // Statics\n\n    /**\n     * Returns a new Vector4 set from the starting index of the given array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @returns the new vector\n     */\n\n  }], [{\n    key: \"FromArray\",\n    value: function FromArray(array, offset) {\n      if (!offset) {\n        offset = 0;\n      }\n\n      return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n    /**\n     * Updates the given vector \"result\" from the starting index of the given array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @param result the vector to store the result in\n     */\n\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      result.z = array[offset + 2];\n      result.w = array[offset + 3];\n    }\n    /**\n     * Updates the given vector \"result\" from the starting index of the given Float32Array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @param result the vector to store the result in\n     */\n\n  }, {\n    key: \"FromFloatArrayToRef\",\n    value: function FromFloatArrayToRef(array, offset, result) {\n      Vector4.FromArrayToRef(array, offset, result);\n    }\n    /**\n     * Updates the given vector \"result\" coordinates from the given floats.\n     * @param x float to set from\n     * @param y float to set from\n     * @param z float to set from\n     * @param w float to set from\n     * @param result the vector to the floats in\n     */\n\n  }, {\n    key: \"FromFloatsToRef\",\n    value: function FromFloatsToRef(x, y, z, w, result) {\n      result.x = x;\n      result.y = y;\n      result.z = z;\n      result.w = w;\n    }\n    /**\n     * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n     * @returns the new vector\n     */\n\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Vector4(0.0, 0.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n     * @returns the new vector\n     */\n\n  }, {\n    key: \"One\",\n    value: function One() {\n      return new Vector4(1.0, 1.0, 1.0, 1.0);\n    }\n    /**\n     * Gets a zero Vector4 that must not be updated\n     */\n\n  }, {\n    key: \"ZeroReadOnly\",\n    get: function get() {\n      return Vector4._ZeroReadOnly;\n    }\n    /**\n     * Returns a new normalized Vector4 from the given one.\n     * @param vector the vector to normalize\n     * @returns the vector\n     */\n\n  }, {\n    key: \"Normalize\",\n    value: function Normalize(vector) {\n      var result = Vector4.Zero();\n      Vector4.NormalizeToRef(vector, result);\n      return result;\n    }\n    /**\n     * Updates the given vector \"result\" from the normalization of the given one.\n     * @param vector the vector to normalize\n     * @param result the vector to store the result in\n     */\n\n  }, {\n    key: \"NormalizeToRef\",\n    value: function NormalizeToRef(vector, result) {\n      result.copyFrom(vector);\n      result.normalize();\n    }\n    /**\n     * Returns a vector with the minimum values from the left and right vectors\n     * @param left left vector to minimize\n     * @param right right vector to minimize\n     * @returns a new vector with the minimum of the left and right vector values\n     */\n\n  }, {\n    key: \"Minimize\",\n    value: function Minimize(left, right) {\n      var min = left.clone();\n      min.minimizeInPlace(right);\n      return min;\n    }\n    /**\n     * Returns a vector with the maximum values from the left and right vectors\n     * @param left left vector to maximize\n     * @param right right vector to maximize\n     * @returns a new vector with the maximum of the left and right vector values\n     */\n\n  }, {\n    key: \"Maximize\",\n    value: function Maximize(left, right) {\n      var max = left.clone();\n      max.maximizeInPlace(right);\n      return max;\n    }\n    /**\n     * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n     * @param value1 value to calulate the distance between\n     * @param value2 value to calulate the distance between\n     * @returns the distance between the two vectors\n     */\n\n  }, {\n    key: \"Distance\",\n    value: function Distance(value1, value2) {\n      return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n    }\n    /**\n     * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n     * @param value1 value to calulate the distance between\n     * @param value2 value to calulate the distance between\n     * @returns the distance between the two vectors squared\n     */\n\n  }, {\n    key: \"DistanceSquared\",\n    value: function DistanceSquared(value1, value2) {\n      var x = value1.x - value2.x;\n      var y = value1.y - value2.y;\n      var z = value1.z - value2.z;\n      var w = value1.w - value2.w;\n      return x * x + y * y + z * z + w * w;\n    }\n    /**\n     * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n     * @param value1 value to calulate the center between\n     * @param value2 value to calulate the center between\n     * @returns the center between the two vectors\n     */\n\n  }, {\n    key: \"Center\",\n    value: function Center(value1, value2) {\n      return Vector4.CenterToRef(value1, value2, Vector4.Zero());\n    }\n    /**\n     * Gets the center of the vectors \"value1\" and \"value2\" and stores the result in the vector \"ref\"\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @param ref defines third vector\n     * @returns ref\n     */\n\n  }, {\n    key: \"CenterToRef\",\n    value: function CenterToRef(value1, value2, ref) {\n      return ref.copyFromFloats((value1.x + value2.x) / 2, (value1.y + value2.y) / 2, (value1.z + value2.z) / 2, (value1.w + value2.w) / 2);\n    }\n    /**\n     * Returns a new Vector4 set with the result of the transformation by the given matrix of the given vector.\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * The difference with Vector3.TransformCoordinates is that the w component is not used to divide the other coordinates but is returned in the w coordinate instead\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @returns the transformed Vector4\n     */\n\n  }, {\n    key: \"TransformCoordinates\",\n    value: function TransformCoordinates(vector, transformation) {\n      var result = Vector4.Zero();\n      Vector4.TransformCoordinatesToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * The difference with Vector3.TransformCoordinatesToRef is that the w component is not used to divide the other coordinates but is returned in the w coordinate instead\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector4 where to store the result\n     */\n\n  }, {\n    key: \"TransformCoordinatesToRef\",\n    value: function TransformCoordinatesToRef(vector, transformation, result) {\n      Vector4.TransformCoordinatesFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n     * This method computes tranformed coordinates only, not transformed direction vectors\n     * The difference with Vector3.TransformCoordinatesFromFloatsToRef is that the w component is not used to divide the other coordinates but is returned in the w coordinate instead\n     * @param x define the x coordinate of the source vector\n     * @param y define the y coordinate of the source vector\n     * @param z define the z coordinate of the source vector\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector4 where to store the result\n     */\n\n  }, {\n    key: \"TransformCoordinatesFromFloatsToRef\",\n    value: function TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n      var m = transformation.m;\n      var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n      var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n      var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n      var rw = x * m[3] + y * m[7] + z * m[11] + m[15];\n      result.x = rx;\n      result.y = ry;\n      result.z = rz;\n      result.w = rw;\n    }\n    /**\n     * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector the vector to transform\n     * @param transformation the transformation matrix to apply\n     * @returns the new vector\n     */\n\n  }, {\n    key: \"TransformNormal\",\n    value: function TransformNormal(vector, transformation) {\n      var result = Vector4.Zero();\n      Vector4.TransformNormalToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector the vector to transform\n     * @param transformation the transformation matrix to apply\n     * @param result the vector to store the result in\n     */\n\n  }, {\n    key: \"TransformNormalToRef\",\n    value: function TransformNormalToRef(vector, transformation, result) {\n      var m = transformation.m;\n      var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n      var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n      var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n      result.x = x;\n      result.y = y;\n      result.z = z;\n      result.w = vector.w;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n     * This methods computes transformed normalized direction vectors only.\n     * @param x value to transform\n     * @param y value to transform\n     * @param z value to transform\n     * @param w value to transform\n     * @param transformation the transformation matrix to apply\n     * @param result the vector to store the results in\n     */\n\n  }, {\n    key: \"TransformNormalFromFloatsToRef\",\n    value: function TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {\n      var m = transformation.m;\n      result.x = x * m[0] + y * m[4] + z * m[8];\n      result.y = x * m[1] + y * m[5] + z * m[9];\n      result.z = x * m[2] + y * m[6] + z * m[10];\n      result.w = w;\n    }\n    /**\n     * Creates a new Vector4 from a Vector3\n     * @param source defines the source data\n     * @param w defines the 4th component (default is 0)\n     * @returns a new Vector4\n     */\n\n  }, {\n    key: \"FromVector3\",\n    value: function FromVector3(source) {\n      var w = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return new Vector4(source._x, source._y, source._z, w);\n    }\n  }]);\n\n  return Vector4;\n}();\nVector4._ZeroReadOnly = Vector4.Zero();\n/**\n * Class used to store quaternion data\n * @see https://en.wikipedia.org/wiki/Quaternion\n * @see https://doc.babylonjs.com/features/position,_rotation,_scaling\n */\n\nexport var Quaternion = /*#__PURE__*/function () {\n  /**\n   * Creates a new Quaternion from the given floats\n   * @param x defines the first component (0 by default)\n   * @param y defines the second component (0 by default)\n   * @param z defines the third component (0 by default)\n   * @param w defines the fourth component (1.0 by default)\n   */\n  function Quaternion() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n\n    _classCallCheck(this, Quaternion);\n\n    /** @internal */\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n  /** Gets or sets the x coordinate */\n\n\n  _createClass(Quaternion, [{\n    key: \"x\",\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the y coordinate */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the z coordinate */\n\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the w coordinate */\n\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this._w;\n    },\n    set: function set(value) {\n      this._w = value;\n      this._isDirty = true;\n    }\n    /**\n     * Gets a string representation for the current quaternion\n     * @returns a string with the Quaternion coordinates\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this._x, \" Y: \").concat(this._y, \" Z: \").concat(this._z, \" W: \").concat(this._w, \"}\");\n    }\n    /**\n     * Gets the class name of the quaternion\n     * @returns the string \"Quaternion\"\n     */\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Quaternion\";\n    }\n    /**\n     * Gets a hash code for this quaternion\n     * @returns the quaternion hash code\n     */\n\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this._x);\n\n      var y = _ExtractAsInt(this._y);\n\n      var z = _ExtractAsInt(this._z);\n\n      var w = _ExtractAsInt(this._w);\n\n      var hash = x;\n      hash = hash * 397 ^ y;\n      hash = hash * 397 ^ z;\n      hash = hash * 397 ^ w;\n      return hash;\n    }\n    /**\n     * Copy the quaternion to an array\n     * @returns a new array populated with 4 elements from the quaternion coordinates\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      return [this._x, this._y, this._z, this._w];\n    }\n    /**\n     * Stores from the starting index in the given array the Quaternion successive values\n     * @param array defines the array where to store the x,y,z,w components\n     * @param index defines an optional index in the target array to define where to start storing values\n     * @returns the current Quaternion object\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[index] = this.x;\n      array[index + 1] = this.y;\n      array[index + 2] = this.z;\n      array[index + 3] = this.w;\n      return this;\n    }\n    /**\n     * Check if two quaternions are equals\n     * @param otherQuaternion defines the second operand\n     * @returns true if the current quaternion and the given one coordinates are strictly equals\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherQuaternion) {\n      return otherQuaternion && this._x === otherQuaternion._x && this._y === otherQuaternion._y && this._z === otherQuaternion._z && this._w === otherQuaternion._w;\n    }\n    /**\n     * Gets a boolean if two quaternions are equals (using an epsilon value)\n     * @param otherQuaternion defines the other quaternion\n     * @param epsilon defines the minimal distance to consider equality\n     * @returns true if the given quaternion coordinates are close to the current ones by a distance of epsilon.\n     */\n\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherQuaternion) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherQuaternion && Scalar.WithinEpsilon(this._x, otherQuaternion._x, epsilon) && Scalar.WithinEpsilon(this._y, otherQuaternion._y, epsilon) && Scalar.WithinEpsilon(this._z, otherQuaternion._z, epsilon) && Scalar.WithinEpsilon(this._w, otherQuaternion._w, epsilon);\n    }\n    /**\n     * Clone the current quaternion\n     * @returns a new quaternion copied from the current one\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Quaternion(this._x, this._y, this._z, this._w);\n    }\n    /**\n     * Copy a quaternion to the current one\n     * @param other defines the other quaternion\n     * @returns the updated current quaternion\n     */\n\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      this.x = other._x;\n      this.y = other._y;\n      this.z = other._z;\n      this.w = other._w;\n      return this;\n    }\n    /**\n     * Updates the current quaternion with the given float coordinates\n     * @param x defines the x coordinate\n     * @param y defines the y coordinate\n     * @param z defines the z coordinate\n     * @param w defines the w coordinate\n     * @returns the updated current quaternion\n     */\n\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    }\n    /**\n     * Updates the current quaternion from the given float coordinates\n     * @param x defines the x coordinate\n     * @param y defines the y coordinate\n     * @param z defines the z coordinate\n     * @param w defines the w coordinate\n     * @returns the updated current quaternion\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      return this.copyFromFloats(x, y, z, w);\n    }\n    /**\n     * Adds two quaternions\n     * @param other defines the second operand\n     * @returns a new quaternion as the addition result of the given one and the current quaternion\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return new Quaternion(this._x + other._x, this._y + other._y, this._z + other._z, this._w + other._w);\n    }\n    /**\n     * Add a quaternion to the current one\n     * @param other defines the quaternion to add\n     * @returns the current quaternion\n     */\n\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(other) {\n      this._x += other._x;\n      this._y += other._y;\n      this._z += other._z;\n      this._w += other._w;\n      return this;\n    }\n    /**\n     * Subtract two quaternions\n     * @param other defines the second operand\n     * @returns a new quaternion as the subtraction result of the given one from the current one\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return new Quaternion(this._x - other._x, this._y - other._y, this._z - other._z, this._w - other._w);\n    }\n    /**\n     * Subtract a quaternion to the current one\n     * @param other defines the quaternion to subtract\n     * @returns the current quaternion\n     */\n\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(other) {\n      this._x -= other._x;\n      this._y -= other._y;\n      this._z -= other._z;\n      this._w -= other._w;\n      return this;\n    }\n    /**\n     * Multiplies the current quaternion by a scale factor\n     * @param value defines the scale factor\n     * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(value) {\n      return new Quaternion(this._x * value, this._y * value, this._z * value, this._w * value);\n    }\n    /**\n     * Scale the current quaternion values by a factor and stores the result to a given quaternion\n     * @param scale defines the scale factor\n     * @param result defines the Quaternion object where to store the result\n     * @returns the unmodified current quaternion\n     */\n\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      result.x = this._x * scale;\n      result.y = this._y * scale;\n      result.z = this._z * scale;\n      result.w = this._w * scale;\n      return this;\n    }\n    /**\n     * Multiplies in place the current quaternion by a scale factor\n     * @param value defines the scale factor\n     * @returns the current modified quaternion\n     */\n\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(value) {\n      this.x *= value;\n      this.y *= value;\n      this.z *= value;\n      this.w *= value;\n      return this;\n    }\n    /**\n     * Scale the current quaternion values by a factor and add the result to a given quaternion\n     * @param scale defines the scale factor\n     * @param result defines the Quaternion object where to store the result\n     * @returns the unmodified current quaternion\n     */\n\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      result.x += this._x * scale;\n      result.y += this._y * scale;\n      result.z += this._z * scale;\n      result.w += this._w * scale;\n      return this;\n    }\n    /**\n     * Multiplies two quaternions\n     * @param q1 defines the second operand\n     * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(q1) {\n      var result = new Quaternion(0, 0, 0, 1.0);\n      this.multiplyToRef(q1, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n     * @param q1 defines the second operand\n     * @param result defines the target quaternion\n     * @returns the current quaternion\n     */\n\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(q1, result) {\n      var x = this._x * q1._w + this._y * q1._z - this._z * q1._y + this._w * q1._x;\n      var y = -this._x * q1._z + this._y * q1._w + this._z * q1._x + this._w * q1._y;\n      var z = this._x * q1._y - this._y * q1._x + this._z * q1._w + this._w * q1._z;\n      var w = -this._x * q1._x - this._y * q1._y - this._z * q1._z + this._w * q1._w;\n      result.copyFromFloats(x, y, z, w);\n      return this;\n    }\n    /**\n     * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n     * @param q1 defines the second operand\n     * @returns the currentupdated quaternion\n     */\n\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(q1) {\n      this.multiplyToRef(q1, this);\n      return this;\n    }\n    /**\n     * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n     * @param ref defines the target quaternion\n     * @returns the current quaternion\n     */\n\n  }, {\n    key: \"conjugateToRef\",\n    value: function conjugateToRef(ref) {\n      ref.copyFromFloats(-this._x, -this._y, -this._z, this._w);\n      return this;\n    }\n    /**\n     * Conjugates in place (1-q) the current quaternion\n     * @returns the current updated quaternion\n     */\n\n  }, {\n    key: \"conjugateInPlace\",\n    value: function conjugateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      this.z *= -1;\n      return this;\n    }\n    /**\n     * Conjugates in place (1-q) the current quaternion\n     * @returns a new quaternion\n     */\n\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      return new Quaternion(-this._x, -this._y, -this._z, this._w);\n    }\n    /**\n     * Returns the inverse of the current quaternion\n     * @returns a new quaternion\n     */\n\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      var conjugate = this.conjugate();\n      var lengthSquared = this.lengthSquared();\n\n      if (lengthSquared == 0 || lengthSquared == 1) {\n        return conjugate;\n      }\n\n      conjugate.scaleInPlace(1 / lengthSquared);\n      return conjugate;\n    }\n    /**\n     * Invert in place the current quaternion\n     * @returns this quaternion\n     */\n\n  }, {\n    key: \"invertInPlace\",\n    value: function invertInPlace() {\n      this.conjugateInPlace();\n      var lengthSquared = this.lengthSquared();\n\n      if (lengthSquared == 0 || lengthSquared == 1) {\n        return this;\n      }\n\n      this.scaleInPlace(1 / lengthSquared);\n      return this;\n    }\n    /**\n     * Gets squared length of current quaternion\n     * @returns the quaternion length (float)\n     */\n\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n    }\n    /**\n     * Gets length of current quaternion\n     * @returns the quaternion length (float)\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.lengthSquared());\n    }\n    /**\n     * Normalize in place the current quaternion\n     * @returns the current updated quaternion\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var len = this.length();\n\n      if (len === 0) {\n        return this;\n      }\n\n      var inv = 1.0 / len;\n      this.scaleInPlace(inv);\n      return this;\n    }\n    /**\n     * Normalize a copy of the current quaternion\n     * @returns the normalized quaternion\n     */\n\n  }, {\n    key: \"normalizeToNew\",\n    value: function normalizeToNew() {\n      var len = this.length();\n\n      if (len === 0) {\n        return this.clone();\n      }\n\n      var inv = 1.0 / len;\n      return this.scale(inv);\n    }\n    /**\n     * Returns a new Vector3 set with the Euler angles translated from the current quaternion\n     * @returns a new Vector3 containing the Euler angles\n     * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/rotation_conventions\n     */\n\n  }, {\n    key: \"toEulerAngles\",\n    value: function toEulerAngles() {\n      var result = Vector3.Zero();\n      this.toEulerAnglesToRef(result);\n      return result;\n    }\n    /**\n     * Sets the given vector3 \"result\" with the Euler angles translated from the current quaternion\n     * @param result defines the vector which will be filled with the Euler angles\n     * @returns the current unchanged quaternion\n     * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/rotation_conventions\n     */\n\n  }, {\n    key: \"toEulerAnglesToRef\",\n    value: function toEulerAnglesToRef(result) {\n      var qz = this._z;\n      var qx = this._x;\n      var qy = this._y;\n      var qw = this._w;\n      var zAxisY = qy * qz - qx * qw;\n      var limit = 0.4999999;\n\n      if (zAxisY < -limit) {\n        result.y = 2 * Math.atan2(qy, qw);\n        result.x = Math.PI / 2;\n        result.z = 0;\n      } else if (zAxisY > limit) {\n        result.y = 2 * Math.atan2(qy, qw);\n        result.x = -Math.PI / 2;\n        result.z = 0;\n      } else {\n        var sqw = qw * qw;\n        var sqz = qz * qz;\n        var sqx = qx * qx;\n        var sqy = qy * qy;\n        result.z = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\n        result.x = Math.asin(-2.0 * zAxisY);\n        result.y = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\n      }\n\n      return this;\n    }\n    /**\n     * Updates the given rotation matrix with the current quaternion values\n     * @param result defines the target matrix\n     * @returns the current unchanged quaternion\n     */\n\n  }, {\n    key: \"toRotationMatrix\",\n    value: function toRotationMatrix(result) {\n      Matrix.FromQuaternionToRef(this, result);\n      return this;\n    }\n    /**\n     * Updates the current quaternion from the given rotation matrix values\n     * @param matrix defines the source matrix\n     * @returns the current updated quaternion\n     */\n\n  }, {\n    key: \"fromRotationMatrix\",\n    value: function fromRotationMatrix(matrix) {\n      Quaternion.FromRotationMatrixToRef(matrix, this);\n      return this;\n    } // Statics\n\n    /**\n     * Creates a new quaternion from a rotation matrix\n     * @param matrix defines the source matrix\n     * @returns a new quaternion created from the given rotation matrix values\n     */\n\n  }], [{\n    key: \"FromRotationMatrix\",\n    value: function FromRotationMatrix(matrix) {\n      var result = new Quaternion();\n      Quaternion.FromRotationMatrixToRef(matrix, result);\n      return result;\n    }\n    /**\n     * Updates the given quaternion with the given rotation matrix values\n     * @param matrix defines the source matrix\n     * @param result defines the target quaternion\n     */\n\n  }, {\n    key: \"FromRotationMatrixToRef\",\n    value: function FromRotationMatrixToRef(matrix, result) {\n      var data = matrix.m;\n      var m11 = data[0],\n          m12 = data[4],\n          m13 = data[8];\n      var m21 = data[1],\n          m22 = data[5],\n          m23 = data[9];\n      var m31 = data[2],\n          m32 = data[6],\n          m33 = data[10];\n      var trace = m11 + m22 + m33;\n      var s;\n\n      if (trace > 0) {\n        s = 0.5 / Math.sqrt(trace + 1.0);\n        result.w = 0.25 / s;\n        result.x = (m32 - m23) * s;\n        result.y = (m13 - m31) * s;\n        result.z = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n        result.w = (m32 - m23) / s;\n        result.x = 0.25 * s;\n        result.y = (m12 + m21) / s;\n        result.z = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n        result.w = (m13 - m31) / s;\n        result.x = (m12 + m21) / s;\n        result.y = 0.25 * s;\n        result.z = (m23 + m32) / s;\n      } else {\n        s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n        result.w = (m21 - m12) / s;\n        result.x = (m13 + m31) / s;\n        result.y = (m23 + m32) / s;\n        result.z = 0.25 * s;\n      }\n    }\n    /**\n     * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @returns the dot product\n     */\n\n  }, {\n    key: \"Dot\",\n    value: function Dot(left, right) {\n      return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n    }\n    /**\n     * Checks if the two quaternions are close to each other\n     * @param quat0 defines the first quaternion to check\n     * @param quat1 defines the second quaternion to check\n     * @returns true if the two quaternions are close to each other\n     */\n\n  }, {\n    key: \"AreClose\",\n    value: function AreClose(quat0, quat1) {\n      var dot = Quaternion.Dot(quat0, quat1);\n      return dot >= 0;\n    }\n    /**\n     * Smooth interpolation between two quaternions using Slerp\n     *\n     * @param source source quaternion\n     * @param goal goal quaternion\n     * @param deltaTime current interpolation frame\n     * @param lerpTime total interpolation time\n     * @param result the smoothed quaternion\n     */\n\n  }, {\n    key: \"SmoothToRef\",\n    value: function SmoothToRef(source, goal, deltaTime, lerpTime, result) {\n      var slerp = lerpTime === 0 ? 1 : deltaTime / lerpTime;\n      slerp = Scalar.Clamp(slerp, 0, 1);\n      Quaternion.SlerpToRef(source, goal, slerp, result);\n    }\n    /**\n     * Creates an empty quaternion\n     * @returns a new quaternion set to (0.0, 0.0, 0.0)\n     */\n\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Quaternion(0.0, 0.0, 0.0, 0.0);\n    }\n    /**\n     * Inverse a given quaternion\n     * @param q defines the source quaternion\n     * @returns a new quaternion as the inverted current quaternion\n     */\n\n  }, {\n    key: \"Inverse\",\n    value: function Inverse(q) {\n      return new Quaternion(-q._x, -q._y, -q._z, q._w);\n    }\n    /**\n     * Inverse a given quaternion\n     * @param q defines the source quaternion\n     * @param result the quaternion the result will be stored in\n     * @returns the result quaternion\n     */\n\n  }, {\n    key: \"InverseToRef\",\n    value: function InverseToRef(q, result) {\n      result.set(-q._x, -q._y, -q._z, q._w);\n      return result;\n    }\n    /**\n     * Creates an identity quaternion\n     * @returns the identity quaternion\n     */\n\n  }, {\n    key: \"Identity\",\n    value: function Identity() {\n      return new Quaternion(0.0, 0.0, 0.0, 1.0);\n    }\n    /**\n     * Gets a boolean indicating if the given quaternion is identity\n     * @param quaternion defines the quaternion to check\n     * @returns true if the quaternion is identity\n     */\n\n  }, {\n    key: \"IsIdentity\",\n    value: function IsIdentity(quaternion) {\n      return quaternion && quaternion._x === 0 && quaternion._y === 0 && quaternion._z === 0 && quaternion._w === 1;\n    }\n    /**\n     * Creates a quaternion from a rotation around an axis\n     * @param axis defines the axis to use\n     * @param angle defines the angle to use\n     * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n     */\n\n  }, {\n    key: \"RotationAxis\",\n    value: function RotationAxis(axis, angle) {\n      return Quaternion.RotationAxisToRef(axis, angle, new Quaternion());\n    }\n    /**\n     * Creates a rotation around an axis and stores it into the given quaternion\n     * @param axis defines the axis to use\n     * @param angle defines the angle to use\n     * @param result defines the target quaternion\n     * @returns the target quaternion\n     */\n\n  }, {\n    key: \"RotationAxisToRef\",\n    value: function RotationAxisToRef(axis, angle, result) {\n      var sin = Math.sin(angle / 2);\n      axis.normalize();\n      result.w = Math.cos(angle / 2);\n      result.x = axis._x * sin;\n      result.y = axis._y * sin;\n      result.z = axis._z * sin;\n      return result;\n    }\n    /**\n     * Creates a new quaternion from data stored into an array\n     * @param array defines the data source\n     * @param offset defines the offset in the source array where the data starts\n     * @returns a new quaternion\n     */\n\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array, offset) {\n      if (!offset) {\n        offset = 0;\n      }\n\n      return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n    /**\n     * Updates the given quaternion \"result\" from the starting index of the given array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @param result the quaternion to store the result in\n     */\n\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      result.z = array[offset + 2];\n      result.w = array[offset + 3];\n    }\n    /**\n     * Create a quaternion from Euler rotation angles\n     * @param x Pitch\n     * @param y Yaw\n     * @param z Roll\n     * @returns the new Quaternion\n     */\n\n  }, {\n    key: \"FromEulerAngles\",\n    value: function FromEulerAngles(x, y, z) {\n      var q = new Quaternion();\n      Quaternion.RotationYawPitchRollToRef(y, x, z, q);\n      return q;\n    }\n    /**\n     * Updates a quaternion from Euler rotation angles\n     * @param x Pitch\n     * @param y Yaw\n     * @param z Roll\n     * @param result the quaternion to store the result\n     * @returns the updated quaternion\n     */\n\n  }, {\n    key: \"FromEulerAnglesToRef\",\n    value: function FromEulerAnglesToRef(x, y, z, result) {\n      Quaternion.RotationYawPitchRollToRef(y, x, z, result);\n      return result;\n    }\n    /**\n     * Create a quaternion from Euler rotation vector\n     * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\n     * @returns the new Quaternion\n     */\n\n  }, {\n    key: \"FromEulerVector\",\n    value: function FromEulerVector(vec) {\n      var q = new Quaternion();\n      Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, q);\n      return q;\n    }\n    /**\n     * Updates a quaternion from Euler rotation vector\n     * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\n     * @param result the quaternion to store the result\n     * @returns the updated quaternion\n     */\n\n  }, {\n    key: \"FromEulerVectorToRef\",\n    value: function FromEulerVectorToRef(vec, result) {\n      Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, result);\n      return result;\n    }\n    /**\n     * Updates a quaternion so that it rotates vector vecFrom to vector vecTo\n     * @param vecFrom defines the direction vector from which to rotate\n     * @param vecTo defines the direction vector to which to rotate\n     * @param result the quaternion to store the result\n     * @returns the updated quaternion\n     */\n\n  }, {\n    key: \"FromUnitVectorsToRef\",\n    value: function FromUnitVectorsToRef(vecFrom, vecTo, result) {\n      var r = Vector3.Dot(vecFrom, vecTo) + 1;\n\n      if (r < Epsilon) {\n        if (Math.abs(vecFrom.x) > Math.abs(vecFrom.z)) {\n          result.set(-vecFrom.y, vecFrom.x, 0, 0);\n        } else {\n          result.set(0, -vecFrom.z, vecFrom.y, 0);\n        }\n      } else {\n        Vector3.CrossToRef(vecFrom, vecTo, TmpVectors.Vector3[0]);\n        result.set(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z, r);\n      }\n\n      return result.normalize();\n    }\n    /**\n     * Creates a new quaternion from the given Euler float angles (y, x, z)\n     * @param yaw defines the rotation around Y axis\n     * @param pitch defines the rotation around X axis\n     * @param roll defines the rotation around Z axis\n     * @returns the new quaternion\n     */\n\n  }, {\n    key: \"RotationYawPitchRoll\",\n    value: function RotationYawPitchRoll(yaw, pitch, roll) {\n      var q = new Quaternion();\n      Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n      return q;\n    }\n    /**\n     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n     * @param yaw defines the rotation around Y axis\n     * @param pitch defines the rotation around X axis\n     * @param roll defines the rotation around Z axis\n     * @param result defines the target quaternion\n     */\n\n  }, {\n    key: \"RotationYawPitchRollToRef\",\n    value: function RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n      // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\n      var halfRoll = roll * 0.5;\n      var halfPitch = pitch * 0.5;\n      var halfYaw = yaw * 0.5;\n      var sinRoll = Math.sin(halfRoll);\n      var cosRoll = Math.cos(halfRoll);\n      var sinPitch = Math.sin(halfPitch);\n      var cosPitch = Math.cos(halfPitch);\n      var sinYaw = Math.sin(halfYaw);\n      var cosYaw = Math.cos(halfYaw);\n      result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n      result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n      result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\n      result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\n    }\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n     * @param alpha defines the rotation around first axis\n     * @param beta defines the rotation around second axis\n     * @param gamma defines the rotation around third axis\n     * @returns the new quaternion\n     */\n\n  }, {\n    key: \"RotationAlphaBetaGamma\",\n    value: function RotationAlphaBetaGamma(alpha, beta, gamma) {\n      var result = new Quaternion();\n      Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n      return result;\n    }\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n     * @param alpha defines the rotation around first axis\n     * @param beta defines the rotation around second axis\n     * @param gamma defines the rotation around third axis\n     * @param result defines the target quaternion\n     */\n\n  }, {\n    key: \"RotationAlphaBetaGammaToRef\",\n    value: function RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {\n      // Produces a quaternion from Euler angles in the z-x-z orientation\n      var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n      var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n      var halfBeta = beta * 0.5;\n      result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n      result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n      result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n      result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n    }\n    /**\n     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @returns the new quaternion\n     */\n\n  }, {\n    key: \"RotationQuaternionFromAxis\",\n    value: function RotationQuaternionFromAxis(axis1, axis2, axis3) {\n      var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n      Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n      return quat;\n    }\n    /**\n     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @param ref defines the target quaternion\n     */\n\n  }, {\n    key: \"RotationQuaternionFromAxisToRef\",\n    value: function RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {\n      var rotMat = MathTmp.Matrix[0];\n      Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n      Quaternion.FromRotationMatrixToRef(rotMat, ref);\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction, the up direction being oriented like \"up\".\n     * This function works in left handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns A new quaternion oriented toward the specified forward and up.\n     */\n\n  }, {\n    key: \"FromLookDirectionLH\",\n    value: function FromLookDirectionLH(forward, up) {\n      var quat = new Quaternion();\n      Quaternion.FromLookDirectionLHToRef(forward, up, quat);\n      return quat;\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction with the up direction being oriented like \"up\", and stores it in the target quaternion.\n     * This function works in left handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param ref defines the target quaternion.\n     */\n\n  }, {\n    key: \"FromLookDirectionLHToRef\",\n    value: function FromLookDirectionLHToRef(forward, up, ref) {\n      var rotMat = MathTmp.Matrix[0];\n      Matrix.LookDirectionLHToRef(forward, up, rotMat);\n      Quaternion.FromRotationMatrixToRef(rotMat, ref);\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction, the up direction being oriented like \"up\".\n     * This function works in right handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns A new quaternion oriented toward the specified forward and up.\n     */\n\n  }, {\n    key: \"FromLookDirectionRH\",\n    value: function FromLookDirectionRH(forward, up) {\n      var quat = new Quaternion();\n      Quaternion.FromLookDirectionRHToRef(forward, up, quat);\n      return quat;\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction with the up direction being oriented like \"up\", and stores it in the target quaternion.\n     * This function works in right handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param ref defines the target quaternion.\n     */\n\n  }, {\n    key: \"FromLookDirectionRHToRef\",\n    value: function FromLookDirectionRHToRef(forward, up, ref) {\n      var rotMat = MathTmp.Matrix[0];\n      Matrix.LookDirectionRHToRef(forward, up, rotMat);\n      return Quaternion.FromRotationMatrixToRef(rotMat, ref);\n    }\n    /**\n     * Interpolates between two quaternions\n     * @param left defines first quaternion\n     * @param right defines second quaternion\n     * @param amount defines the gradient to use\n     * @returns the new interpolated quaternion\n     */\n\n  }, {\n    key: \"Slerp\",\n    value: function Slerp(left, right, amount) {\n      var result = Quaternion.Identity();\n      Quaternion.SlerpToRef(left, right, amount, result);\n      return result;\n    }\n    /**\n     * Interpolates between two quaternions and stores it into a target quaternion\n     * @param left defines first quaternion\n     * @param right defines second quaternion\n     * @param amount defines the gradient to use\n     * @param result defines the target quaternion\n     */\n\n  }, {\n    key: \"SlerpToRef\",\n    value: function SlerpToRef(left, right, amount, result) {\n      var num2;\n      var num3;\n      var num4 = left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n      var flag = false;\n\n      if (num4 < 0) {\n        flag = true;\n        num4 = -num4;\n      }\n\n      if (num4 > 0.999999) {\n        num3 = 1 - amount;\n        num2 = flag ? -amount : amount;\n      } else {\n        var num5 = Math.acos(num4);\n        var num6 = 1.0 / Math.sin(num5);\n        num3 = Math.sin((1.0 - amount) * num5) * num6;\n        num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n      }\n\n      result.x = num3 * left._x + num2 * right._x;\n      result.y = num3 * left._y + num2 * right._y;\n      result.z = num3 * left._z + num2 * right._z;\n      result.w = num3 * left._w + num2 * right._w;\n    }\n    /**\n     * Interpolate between two quaternions using Hermite interpolation\n     * @param value1 defines first quaternion\n     * @param tangent1 defines the incoming tangent\n     * @param value2 defines second quaternion\n     * @param tangent2 defines the outgoing tangent\n     * @param amount defines the target quaternion\n     * @returns the new interpolated quaternion\n     */\n\n  }, {\n    key: \"Hermite\",\n    value: function Hermite(value1, tangent1, value2, tangent2, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n      var part2 = -2.0 * cubed + 3.0 * squared;\n      var part3 = cubed - 2.0 * squared + amount;\n      var part4 = cubed - squared;\n      var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n      var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n      var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n      var w = value1._w * part1 + value2._w * part2 + tangent1._w * part3 + tangent2._w * part4;\n      return new Quaternion(x, y, z, w);\n    }\n    /**\n     * Returns a new Quaternion which is the 1st derivative of the Hermite spline defined by the quaternions \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @returns 1st derivative\n     */\n\n  }, {\n    key: \"Hermite1stDerivative\",\n    value: function Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n      var result = Quaternion.Zero();\n      this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n      return result;\n    }\n    /**\n     * Update a Quaternion with the 1st derivative of the Hermite spline defined by the quaternions \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @param result define where to store the derivative\n     */\n\n  }, {\n    key: \"Hermite1stDerivativeToRef\",\n    value: function Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n      var t2 = time * time;\n      result.x = (t2 - time) * 6 * value1.x + (3 * t2 - 4 * time + 1) * tangent1.x + (-t2 + time) * 6 * value2.x + (3 * t2 - 2 * time) * tangent2.x;\n      result.y = (t2 - time) * 6 * value1.y + (3 * t2 - 4 * time + 1) * tangent1.y + (-t2 + time) * 6 * value2.y + (3 * t2 - 2 * time) * tangent2.y;\n      result.z = (t2 - time) * 6 * value1.z + (3 * t2 - 4 * time + 1) * tangent1.z + (-t2 + time) * 6 * value2.z + (3 * t2 - 2 * time) * tangent2.z;\n      result.w = (t2 - time) * 6 * value1.w + (3 * t2 - 4 * time + 1) * tangent1.w + (-t2 + time) * 6 * value2.w + (3 * t2 - 2 * time) * tangent2.w;\n    }\n  }]);\n\n  return Quaternion;\n}();\n/**\n * Class used to store matrix data (4x4)\n */\n\nexport var Matrix = /*#__PURE__*/function () {\n  /**\n   * Creates an empty matrix (filled with zeros)\n   */\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    this._isIdentity = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2 = true;\n    this._isIdentity3x2Dirty = true;\n    /**\n     * Gets the update flag of the matrix which is an unique number for the matrix.\n     * It will be incremented every time the matrix data change.\n     * You can use it to speed the comparison between two versions of the same matrix.\n     */\n\n    this.updateFlag = -1;\n\n    if (PerformanceConfigurator.MatrixTrackPrecisionChange) {\n      PerformanceConfigurator.MatrixTrackedMatrices.push(this);\n    }\n\n    this._m = new PerformanceConfigurator.MatrixCurrentType(16);\n    this.markAsUpdated();\n  }\n  /**\n   * Gets the precision of matrix computations\n   */\n\n\n  _createClass(Matrix, [{\n    key: \"m\",\n    get:\n    /**\n     * Gets the internal data of the matrix\n     */\n    function get() {\n      return this._m;\n    }\n    /**\n     * Update the updateFlag to indicate that the matrix has been updated\n     */\n\n  }, {\n    key: \"markAsUpdated\",\n    value: function markAsUpdated() {\n      this.updateFlag = Matrix._UpdateFlagSeed++;\n      this._isIdentity = false;\n      this._isIdentity3x2 = false;\n      this._isIdentityDirty = true;\n      this._isIdentity3x2Dirty = true;\n    }\n  }, {\n    key: \"_updateIdentityStatus\",\n    value: function _updateIdentityStatus(isIdentity) {\n      var isIdentityDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isIdentity3x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isIdentity3x2Dirty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      this._isIdentity = isIdentity;\n      this._isIdentity3x2 = isIdentity || isIdentity3x2;\n      this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n      this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n    } // Properties\n\n    /**\n     * Check if the current matrix is identity\n     * @returns true is the matrix is the identity matrix\n     */\n\n  }, {\n    key: \"isIdentity\",\n    value: function isIdentity() {\n      if (this._isIdentityDirty) {\n        this._isIdentityDirty = false;\n        var m = this._m;\n        this._isIdentity = m[0] === 1.0 && m[1] === 0.0 && m[2] === 0.0 && m[3] === 0.0 && m[4] === 0.0 && m[5] === 1.0 && m[6] === 0.0 && m[7] === 0.0 && m[8] === 0.0 && m[9] === 0.0 && m[10] === 1.0 && m[11] === 0.0 && m[12] === 0.0 && m[13] === 0.0 && m[14] === 0.0 && m[15] === 1.0;\n      }\n\n      return this._isIdentity;\n    }\n    /**\n     * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n     * @returns true is the matrix is the identity matrix\n     */\n\n  }, {\n    key: \"isIdentityAs3x2\",\n    value: function isIdentityAs3x2() {\n      if (this._isIdentity3x2Dirty) {\n        this._isIdentity3x2Dirty = false;\n\n        if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n          this._isIdentity3x2 = false;\n        } else if (this._m[1] !== 0.0 || this._m[2] !== 0.0 || this._m[3] !== 0.0 || this._m[4] !== 0.0 || this._m[6] !== 0.0 || this._m[7] !== 0.0 || this._m[8] !== 0.0 || this._m[9] !== 0.0 || this._m[10] !== 0.0 || this._m[11] !== 0.0 || this._m[12] !== 0.0 || this._m[13] !== 0.0 || this._m[14] !== 0.0) {\n          this._isIdentity3x2 = false;\n        } else {\n          this._isIdentity3x2 = true;\n        }\n      }\n\n      return this._isIdentity3x2;\n    }\n    /**\n     * Gets the determinant of the matrix\n     * @returns the matrix determinant\n     */\n\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      if (this._isIdentity === true) {\n        return 1;\n      }\n\n      var m = this._m;\n      var m00 = m[0],\n          m01 = m[1],\n          m02 = m[2],\n          m03 = m[3];\n      var m10 = m[4],\n          m11 = m[5],\n          m12 = m[6],\n          m13 = m[7];\n      var m20 = m[8],\n          m21 = m[9],\n          m22 = m[10],\n          m23 = m[11];\n      var m30 = m[12],\n          m31 = m[13],\n          m32 = m[14],\n          m33 = m[15]; // https://en.wikipedia.org/wiki/Laplace_expansion\n      // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n      // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n      // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n      // where\n      //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n      //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n      //\n      // Here we do that for the 1st row.\n\n      var det_22_33 = m22 * m33 - m32 * m23;\n      var det_21_33 = m21 * m33 - m31 * m23;\n      var det_21_32 = m21 * m32 - m31 * m22;\n      var det_20_33 = m20 * m33 - m30 * m23;\n      var det_20_32 = m20 * m32 - m22 * m30;\n      var det_20_31 = m20 * m31 - m30 * m21;\n      var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n      var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n      var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n      var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n      return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n    } // Methods\n\n    /**\n     * Returns the matrix as a Float32Array or Array<number>\n     * @returns the matrix underlying array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this._m;\n    }\n    /**\n     * Returns the matrix as a Float32Array or Array<number>\n     * @returns the matrix underlying array.\n     */\n\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      return this._m;\n    }\n    /**\n     * Inverts the current matrix in place\n     * @returns the current inverted matrix\n     */\n\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      this.invertToRef(this);\n      return this;\n    }\n    /**\n     * Sets all the matrix elements to zero\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n\n      this._updateIdentityStatus(false);\n\n      return this;\n    }\n    /**\n     * Adds the current matrix with a second one\n     * @param other defines the matrix to add\n     * @returns a new matrix as the addition of the current matrix and the given one\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      var result = new Matrix();\n      this.addToRef(other, result);\n      return result;\n    }\n    /**\n     * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n     * @param other defines the matrix to add\n     * @param result defines the target matrix\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(other, result) {\n      var m = this._m;\n      var resultM = result._m;\n      var otherM = other.m;\n\n      for (var index = 0; index < 16; index++) {\n        resultM[index] = m[index] + otherM[index];\n      }\n\n      result.markAsUpdated();\n      return this;\n    }\n    /**\n     * Adds in place the given matrix to the current matrix\n     * @param other defines the second operand\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"addToSelf\",\n    value: function addToSelf(other) {\n      var m = this._m;\n      var otherM = other.m;\n\n      for (var index = 0; index < 16; index++) {\n        m[index] += otherM[index];\n      }\n\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Sets the given matrix to the current inverted Matrix\n     * @param other defines the target matrix\n     * @returns the unmodified current matrix\n     */\n\n  }, {\n    key: \"invertToRef\",\n    value: function invertToRef(other) {\n      if (this._isIdentity === true) {\n        Matrix.IdentityToRef(other);\n        return this;\n      } // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n\n\n      var m = this._m;\n      var m00 = m[0],\n          m01 = m[1],\n          m02 = m[2],\n          m03 = m[3];\n      var m10 = m[4],\n          m11 = m[5],\n          m12 = m[6],\n          m13 = m[7];\n      var m20 = m[8],\n          m21 = m[9],\n          m22 = m[10],\n          m23 = m[11];\n      var m30 = m[12],\n          m31 = m[13],\n          m32 = m[14],\n          m33 = m[15];\n      var det_22_33 = m22 * m33 - m32 * m23;\n      var det_21_33 = m21 * m33 - m31 * m23;\n      var det_21_32 = m21 * m32 - m31 * m22;\n      var det_20_33 = m20 * m33 - m30 * m23;\n      var det_20_32 = m20 * m32 - m22 * m30;\n      var det_20_31 = m20 * m31 - m30 * m21;\n      var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n      var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n      var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n      var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n      var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n\n      if (det === 0) {\n        // not invertible\n        other.copyFrom(this);\n        return this;\n      }\n\n      var detInv = 1 / det;\n      var det_12_33 = m12 * m33 - m32 * m13;\n      var det_11_33 = m11 * m33 - m31 * m13;\n      var det_11_32 = m11 * m32 - m31 * m12;\n      var det_10_33 = m10 * m33 - m30 * m13;\n      var det_10_32 = m10 * m32 - m30 * m12;\n      var det_10_31 = m10 * m31 - m30 * m11;\n      var det_12_23 = m12 * m23 - m22 * m13;\n      var det_11_23 = m11 * m23 - m21 * m13;\n      var det_11_22 = m11 * m22 - m21 * m12;\n      var det_10_23 = m10 * m23 - m20 * m13;\n      var det_10_22 = m10 * m22 - m20 * m12;\n      var det_10_21 = m10 * m21 - m20 * m11;\n      var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n      var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n      var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n      var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n      var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n      var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n      var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n      var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n      var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n      var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n      var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n      var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n      Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n      return this;\n    }\n    /**\n     * add a value at the specified position in the current Matrix\n     * @param index the index of the value within the matrix. between 0 and 15.\n     * @param value the value to be added\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"addAtIndex\",\n    value: function addAtIndex(index, value) {\n      this._m[index] += value;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * mutiply the specified position in the current Matrix by a value\n     * @param index the index of the value within the matrix. between 0 and 15.\n     * @param value the value to be added\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"multiplyAtIndex\",\n    value: function multiplyAtIndex(index, value) {\n      this._m[index] *= value;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Inserts the translation vector (using 3 floats) in the current matrix\n     * @param x defines the 1st component of the translation\n     * @param y defines the 2nd component of the translation\n     * @param z defines the 3rd component of the translation\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"setTranslationFromFloats\",\n    value: function setTranslationFromFloats(x, y, z) {\n      this._m[12] = x;\n      this._m[13] = y;\n      this._m[14] = z;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Adds the translation vector (using 3 floats) in the current matrix\n     * @param x defines the 1st component of the translation\n     * @param y defines the 2nd component of the translation\n     * @param z defines the 3rd component of the translation\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"addTranslationFromFloats\",\n    value: function addTranslationFromFloats(x, y, z) {\n      this._m[12] += x;\n      this._m[13] += y;\n      this._m[14] += z;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Inserts the translation vector in the current matrix\n     * @param vector3 defines the translation to insert\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"setTranslation\",\n    value: function setTranslation(vector3) {\n      return this.setTranslationFromFloats(vector3._x, vector3._y, vector3._z);\n    }\n    /**\n     * Gets the translation value of the current matrix\n     * @returns a new Vector3 as the extracted translation from the matrix\n     */\n\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      return new Vector3(this._m[12], this._m[13], this._m[14]);\n    }\n    /**\n     * Fill a Vector3 with the extracted translation from the matrix\n     * @param result defines the Vector3 where to store the translation\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"getTranslationToRef\",\n    value: function getTranslationToRef(result) {\n      result.x = this._m[12];\n      result.y = this._m[13];\n      result.z = this._m[14];\n      return this;\n    }\n    /**\n     * Remove rotation and scaling part from the matrix\n     * @returns the updated matrix\n     */\n\n  }, {\n    key: \"removeRotationAndScaling\",\n    value: function removeRotationAndScaling() {\n      var m = this.m;\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n\n      this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n\n      return this;\n    }\n    /**\n     * Multiply two matrices\n     * @param other defines the second operand\n     * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(other) {\n      var result = new Matrix();\n      this.multiplyToRef(other, result);\n      return result;\n    }\n    /**\n     * Copy the current matrix from the given one\n     * @param other defines the source matrix\n     * @returns the current updated matrix\n     */\n\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      other.copyToArray(this._m);\n      var o = other;\n      this.updateFlag = o.updateFlag;\n\n      this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n\n      return this;\n    }\n    /**\n     * Populates the given array from the starting index with the current matrix values\n     * @param array defines the target array\n     * @param offset defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"copyToArray\",\n    value: function copyToArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var source = this._m;\n      array[offset] = source[0];\n      array[offset + 1] = source[1];\n      array[offset + 2] = source[2];\n      array[offset + 3] = source[3];\n      array[offset + 4] = source[4];\n      array[offset + 5] = source[5];\n      array[offset + 6] = source[6];\n      array[offset + 7] = source[7];\n      array[offset + 8] = source[8];\n      array[offset + 9] = source[9];\n      array[offset + 10] = source[10];\n      array[offset + 11] = source[11];\n      array[offset + 12] = source[12];\n      array[offset + 13] = source[13];\n      array[offset + 14] = source[14];\n      array[offset + 15] = source[15];\n      return this;\n    }\n    /**\n     * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n     * @param other defines the second operand\n     * @param result defines the matrix where to store the multiplication\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(other, result) {\n      if (this._isIdentity) {\n        result.copyFrom(other);\n        return this;\n      }\n\n      if (other._isIdentity) {\n        result.copyFrom(this);\n        return this;\n      }\n\n      this.multiplyToArray(other, result._m, 0);\n      result.markAsUpdated();\n      return this;\n    }\n    /**\n     * Sets the Float32Array \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n     * @param other defines the second operand\n     * @param result defines the array where to store the multiplication\n     * @param offset defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"multiplyToArray\",\n    value: function multiplyToArray(other, result, offset) {\n      var m = this._m;\n      var otherM = other.m;\n      var tm0 = m[0],\n          tm1 = m[1],\n          tm2 = m[2],\n          tm3 = m[3];\n      var tm4 = m[4],\n          tm5 = m[5],\n          tm6 = m[6],\n          tm7 = m[7];\n      var tm8 = m[8],\n          tm9 = m[9],\n          tm10 = m[10],\n          tm11 = m[11];\n      var tm12 = m[12],\n          tm13 = m[13],\n          tm14 = m[14],\n          tm15 = m[15];\n      var om0 = otherM[0],\n          om1 = otherM[1],\n          om2 = otherM[2],\n          om3 = otherM[3];\n      var om4 = otherM[4],\n          om5 = otherM[5],\n          om6 = otherM[6],\n          om7 = otherM[7];\n      var om8 = otherM[8],\n          om9 = otherM[9],\n          om10 = otherM[10],\n          om11 = otherM[11];\n      var om12 = otherM[12],\n          om13 = otherM[13],\n          om14 = otherM[14],\n          om15 = otherM[15];\n      result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n      result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n      result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n      result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n      result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n      result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n      result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n      result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n      result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n      result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n      result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n      result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n      result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n      result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n      result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n      result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n      return this;\n    }\n    /**\n     * Check equality between this matrix and a second one\n     * @param value defines the second matrix to compare\n     * @returns true is the current matrix and the given one values are strictly equal\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(value) {\n      var other = value;\n\n      if (!other) {\n        return false;\n      }\n\n      if (this._isIdentity || other._isIdentity) {\n        if (!this._isIdentityDirty && !other._isIdentityDirty) {\n          return this._isIdentity && other._isIdentity;\n        }\n      }\n\n      var m = this.m;\n      var om = other.m;\n      return m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] && m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] && m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] && m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15];\n    }\n    /**\n     * Clone the current matrix\n     * @returns a new matrix from the current matrix\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var matrix = new Matrix();\n      matrix.copyFrom(this);\n      return matrix;\n    }\n    /**\n     * Returns the name of the current matrix class\n     * @returns the string \"Matrix\"\n     */\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Matrix\";\n    }\n    /**\n     * Gets the hash code of the current matrix\n     * @returns the hash code\n     */\n\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var hash = _ExtractAsInt(this._m[0]);\n\n      for (var i = 1; i < 16; i++) {\n        hash = hash * 397 ^ _ExtractAsInt(this._m[i]);\n      }\n\n      return hash;\n    }\n    /**\n     * Decomposes the current Matrix into a translation, rotation and scaling components of the provided node\n     * @param node the node to decompose the matrix to\n     * @returns true if operation was successful\n     */\n\n  }, {\n    key: \"decomposeToTransformNode\",\n    value: function decomposeToTransformNode(node) {\n      node.rotationQuaternion = node.rotationQuaternion || new Quaternion();\n      return this.decompose(node.scaling, node.rotationQuaternion, node.position);\n    }\n    /**\n     * Decomposes the current Matrix into a translation, rotation and scaling components\n     * @param scale defines the scale vector3 given as a reference to update\n     * @param rotation defines the rotation quaternion given as a reference to update\n     * @param translation defines the translation vector3 given as a reference to update\n     * @param preserveScalingNode Use scaling sign coming from this node. Otherwise scaling sign might change.\n     * @returns true if operation was successful\n     */\n\n  }, {\n    key: \"decompose\",\n    value: function decompose(scale, rotation, translation, preserveScalingNode) {\n      if (this._isIdentity) {\n        if (translation) {\n          translation.setAll(0);\n        }\n\n        if (scale) {\n          scale.setAll(1);\n        }\n\n        if (rotation) {\n          rotation.copyFromFloats(0, 0, 0, 1);\n        }\n\n        return true;\n      }\n\n      var m = this._m;\n\n      if (translation) {\n        translation.copyFromFloats(m[12], m[13], m[14]);\n      }\n\n      scale = scale || MathTmp.Vector3[0];\n      scale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n      scale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n      scale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n\n      if (preserveScalingNode) {\n        var signX = preserveScalingNode.scaling.x < 0 ? -1 : 1;\n        var signY = preserveScalingNode.scaling.y < 0 ? -1 : 1;\n        var signZ = preserveScalingNode.scaling.z < 0 ? -1 : 1;\n        scale.x *= signX;\n        scale.y *= signY;\n        scale.z *= signZ;\n      } else {\n        if (this.determinant() <= 0) {\n          scale.y *= -1;\n        }\n      }\n\n      if (scale._x === 0 || scale._y === 0 || scale._z === 0) {\n        if (rotation) {\n          rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n        }\n\n        return false;\n      }\n\n      if (rotation) {\n        var sx = 1 / scale._x,\n            sy = 1 / scale._y,\n            sz = 1 / scale._z;\n        Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, MathTmp.Matrix[0]);\n        Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\n      }\n\n      return true;\n    }\n    /**\n     * Gets specific row of the matrix\n     * @param index defines the number of the row to get\n     * @returns the index-th row of the current matrix as a new Vector4\n     */\n\n  }, {\n    key: \"getRow\",\n    value: function getRow(index) {\n      if (index < 0 || index > 3) {\n        return null;\n      }\n\n      var i = index * 4;\n      return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n    }\n    /**\n     * Gets specific row of the matrix to ref\n     * @param index defines the number of the row to get\n     * @param rowVector vector to store the index-th row of the current matrix\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"getRowToRef\",\n    value: function getRowToRef(index, rowVector) {\n      if (index >= 0 && index < 3) {\n        var i = index * 4;\n        rowVector.x = this._m[i + 0];\n        rowVector.y = this._m[i + 1];\n        rowVector.z = this._m[i + 2];\n        rowVector.w = this._m[i + 3];\n      }\n\n      return this;\n    }\n    /**\n     * Sets the index-th row of the current matrix to the vector4 values\n     * @param index defines the number of the row to set\n     * @param row defines the target vector4\n     * @returns the updated current matrix\n     */\n\n  }, {\n    key: \"setRow\",\n    value: function setRow(index, row) {\n      return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n    }\n    /**\n     * Compute the transpose of the matrix\n     * @returns the new transposed matrix\n     */\n\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      return Matrix.Transpose(this);\n    }\n    /**\n     * Compute the transpose of the matrix and store it in a given matrix\n     * @param result defines the target matrix\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"transposeToRef\",\n    value: function transposeToRef(result) {\n      Matrix.TransposeToRef(this, result);\n      return this;\n    }\n    /**\n     * Sets the index-th row of the current matrix with the given 4 x float values\n     * @param index defines the row index\n     * @param x defines the x component to set\n     * @param y defines the y component to set\n     * @param z defines the z component to set\n     * @param w defines the w component to set\n     * @returns the updated current matrix\n     */\n\n  }, {\n    key: \"setRowFromFloats\",\n    value: function setRowFromFloats(index, x, y, z, w) {\n      if (index < 0 || index > 3) {\n        return this;\n      }\n\n      var i = index * 4;\n      this._m[i + 0] = x;\n      this._m[i + 1] = y;\n      this._m[i + 2] = z;\n      this._m[i + 3] = w;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Compute a new matrix set with the current matrix values multiplied by scale (float)\n     * @param scale defines the scale factor\n     * @returns a new matrix\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(_scale4) {\n      var result = new Matrix();\n      this.scaleToRef(_scale4, result);\n      return result;\n    }\n    /**\n     * Scale the current matrix values by a factor to a given result matrix\n     * @param scale defines the scale factor\n     * @param result defines the matrix to store the result\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] = this._m[index] * scale;\n      }\n\n      result.markAsUpdated();\n      return this;\n    }\n    /**\n     * Scale the current matrix values by a factor and add the result to a given matrix\n     * @param scale defines the scale factor\n     * @param result defines the Matrix to store the result\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] += this._m[index] * scale;\n      }\n\n      result.markAsUpdated();\n      return this;\n    }\n    /**\n     * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n     * @param ref matrix to store the result\n     */\n\n  }, {\n    key: \"toNormalMatrix\",\n    value: function toNormalMatrix(ref) {\n      var tmp = MathTmp.Matrix[0];\n      this.invertToRef(tmp);\n      tmp.transposeToRef(ref);\n      var m = ref._m;\n      Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n    }\n    /**\n     * Gets only rotation part of the current matrix\n     * @returns a new matrix sets to the extracted rotation matrix from the current one\n     */\n\n  }, {\n    key: \"getRotationMatrix\",\n    value: function getRotationMatrix() {\n      var result = new Matrix();\n      this.getRotationMatrixToRef(result);\n      return result;\n    }\n    /**\n     * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n     * @param result defines the target matrix to store data to\n     * @returns the current matrix\n     */\n\n  }, {\n    key: \"getRotationMatrixToRef\",\n    value: function getRotationMatrixToRef(result) {\n      var scale = MathTmp.Vector3[0];\n\n      if (!this.decompose(scale)) {\n        Matrix.IdentityToRef(result);\n        return this;\n      }\n\n      var m = this._m;\n      var sx = 1 / scale._x,\n          sy = 1 / scale._y,\n          sz = 1 / scale._z;\n      Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      return this;\n    }\n    /**\n     * Toggles model matrix from being right handed to left handed in place and vice versa\n     */\n\n  }, {\n    key: \"toggleModelMatrixHandInPlace\",\n    value: function toggleModelMatrixHandInPlace() {\n      var m = this._m;\n      m[2] *= -1;\n      m[6] *= -1;\n      m[8] *= -1;\n      m[9] *= -1;\n      m[14] *= -1;\n      this.markAsUpdated();\n    }\n    /**\n     * Toggles projection matrix from being right handed to left handed in place and vice versa\n     */\n\n  }, {\n    key: \"toggleProjectionMatrixHandInPlace\",\n    value: function toggleProjectionMatrixHandInPlace() {\n      var m = this._m;\n      m[8] *= -1;\n      m[9] *= -1;\n      m[10] *= -1;\n      m[11] *= -1;\n      this.markAsUpdated();\n    } // Statics\n\n    /**\n     * Creates a matrix from an array\n     * @param array defines the source array\n     * @param offset defines an offset in the source array\n     * @returns a new Matrix set from the starting index of the given array\n     */\n\n  }], [{\n    key: \"Use64Bits\",\n    get: function get() {\n      return PerformanceConfigurator.MatrixUse64Bits;\n    }\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = new Matrix();\n      Matrix.FromArrayToRef(array, offset, result);\n      return result;\n    }\n    /**\n     * Copy the content of an array into a given matrix\n     * @param array defines the source array\n     * @param offset defines an offset in the source array\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] = array[index + offset];\n      }\n\n      result.markAsUpdated();\n    }\n    /**\n     * Stores an array into a matrix after having multiplied each component by a given factor\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @param scale defines the scaling factor\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"FromFloat32ArrayToRefScaled\",\n    value: function FromFloat32ArrayToRefScaled(array, offset, scale, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] = array[index + offset] * scale;\n      }\n\n      result.markAsUpdated();\n    }\n    /**\n     * Gets an identity matrix that must not be updated\n     */\n\n  }, {\n    key: \"IdentityReadOnly\",\n    get: function get() {\n      return Matrix._IdentityReadOnly;\n    }\n    /**\n     * Stores a list of values (16) inside a given matrix\n     * @param initialM11 defines 1st value of 1st row\n     * @param initialM12 defines 2nd value of 1st row\n     * @param initialM13 defines 3rd value of 1st row\n     * @param initialM14 defines 4th value of 1st row\n     * @param initialM21 defines 1st value of 2nd row\n     * @param initialM22 defines 2nd value of 2nd row\n     * @param initialM23 defines 3rd value of 2nd row\n     * @param initialM24 defines 4th value of 2nd row\n     * @param initialM31 defines 1st value of 3rd row\n     * @param initialM32 defines 2nd value of 3rd row\n     * @param initialM33 defines 3rd value of 3rd row\n     * @param initialM34 defines 4th value of 3rd row\n     * @param initialM41 defines 1st value of 4th row\n     * @param initialM42 defines 2nd value of 4th row\n     * @param initialM43 defines 3rd value of 4th row\n     * @param initialM44 defines 4th value of 4th row\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"FromValuesToRef\",\n    value: function FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n      var m = result._m;\n      m[0] = initialM11;\n      m[1] = initialM12;\n      m[2] = initialM13;\n      m[3] = initialM14;\n      m[4] = initialM21;\n      m[5] = initialM22;\n      m[6] = initialM23;\n      m[7] = initialM24;\n      m[8] = initialM31;\n      m[9] = initialM32;\n      m[10] = initialM33;\n      m[11] = initialM34;\n      m[12] = initialM41;\n      m[13] = initialM42;\n      m[14] = initialM43;\n      m[15] = initialM44;\n      result.markAsUpdated();\n    }\n    /**\n     * Creates new matrix from a list of values (16)\n     * @param initialM11 defines 1st value of 1st row\n     * @param initialM12 defines 2nd value of 1st row\n     * @param initialM13 defines 3rd value of 1st row\n     * @param initialM14 defines 4th value of 1st row\n     * @param initialM21 defines 1st value of 2nd row\n     * @param initialM22 defines 2nd value of 2nd row\n     * @param initialM23 defines 3rd value of 2nd row\n     * @param initialM24 defines 4th value of 2nd row\n     * @param initialM31 defines 1st value of 3rd row\n     * @param initialM32 defines 2nd value of 3rd row\n     * @param initialM33 defines 3rd value of 3rd row\n     * @param initialM34 defines 4th value of 3rd row\n     * @param initialM41 defines 1st value of 4th row\n     * @param initialM42 defines 2nd value of 4th row\n     * @param initialM43 defines 3rd value of 4th row\n     * @param initialM44 defines 4th value of 4th row\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"FromValues\",\n    value: function FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n      var result = new Matrix();\n      var m = result._m;\n      m[0] = initialM11;\n      m[1] = initialM12;\n      m[2] = initialM13;\n      m[3] = initialM14;\n      m[4] = initialM21;\n      m[5] = initialM22;\n      m[6] = initialM23;\n      m[7] = initialM24;\n      m[8] = initialM31;\n      m[9] = initialM32;\n      m[10] = initialM33;\n      m[11] = initialM34;\n      m[12] = initialM41;\n      m[13] = initialM42;\n      m[14] = initialM43;\n      m[15] = initialM44;\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale defines the scale vector3\n     * @param rotation defines the rotation quaternion\n     * @param translation defines the translation vector3\n     * @returns a new matrix\n     */\n\n  }, {\n    key: \"Compose\",\n    value: function Compose(scale, rotation, translation) {\n      var result = new Matrix();\n      Matrix.ComposeToRef(scale, rotation, translation, result);\n      return result;\n    }\n    /**\n     * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale defines the scale vector3\n     * @param rotation defines the rotation quaternion\n     * @param translation defines the translation vector3\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"ComposeToRef\",\n    value: function ComposeToRef(scale, rotation, translation, result) {\n      var m = result._m;\n      var x = rotation._x,\n          y = rotation._y,\n          z = rotation._z,\n          w = rotation._w;\n      var x2 = x + x,\n          y2 = y + y,\n          z2 = z + z;\n      var xx = x * x2,\n          xy = x * y2,\n          xz = x * z2;\n      var yy = y * y2,\n          yz = y * z2,\n          zz = z * z2;\n      var wx = w * x2,\n          wy = w * y2,\n          wz = w * z2;\n      var sx = scale._x,\n          sy = scale._y,\n          sz = scale._z;\n      m[0] = (1 - (yy + zz)) * sx;\n      m[1] = (xy + wz) * sx;\n      m[2] = (xz - wy) * sx;\n      m[3] = 0;\n      m[4] = (xy - wz) * sy;\n      m[5] = (1 - (xx + zz)) * sy;\n      m[6] = (yz + wx) * sy;\n      m[7] = 0;\n      m[8] = (xz + wy) * sz;\n      m[9] = (yz - wx) * sz;\n      m[10] = (1 - (xx + yy)) * sz;\n      m[11] = 0;\n      m[12] = translation._x;\n      m[13] = translation._y;\n      m[14] = translation._z;\n      m[15] = 1;\n      result.markAsUpdated();\n    }\n    /**\n     * Creates a new identity matrix\n     * @returns a new identity matrix\n     */\n\n  }, {\n    key: \"Identity\",\n    value: function Identity() {\n      var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n\n      identity._updateIdentityStatus(true);\n\n      return identity;\n    }\n    /**\n     * Creates a new identity matrix and stores the result in a given matrix\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"IdentityToRef\",\n    value: function IdentityToRef(result) {\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n      result._updateIdentityStatus(true);\n    }\n    /**\n     * Creates a new zero matrix\n     * @returns a new zero matrix\n     */\n\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\n      zero._updateIdentityStatus(false);\n\n      return zero;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the X axis\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"RotationX\",\n    value: function RotationX(angle) {\n      var result = new Matrix();\n      Matrix.RotationXToRef(angle, result);\n      return result;\n    }\n    /**\n     * Creates a new matrix as the invert of a given matrix\n     * @param source defines the source matrix\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"Invert\",\n    value: function Invert(source) {\n      var result = new Matrix();\n      source.invertToRef(result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"RotationXToRef\",\n    value: function RotationXToRef(angle, result) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n      result._updateIdentityStatus(c === 1 && s === 0);\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Y axis\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"RotationY\",\n    value: function RotationY(angle) {\n      var result = new Matrix();\n      Matrix.RotationYToRef(angle, result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"RotationYToRef\",\n    value: function RotationYToRef(angle, result) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n      result._updateIdentityStatus(c === 1 && s === 0);\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Z axis\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"RotationZ\",\n    value: function RotationZ(angle) {\n      var result = new Matrix();\n      Matrix.RotationZToRef(angle, result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"RotationZToRef\",\n    value: function RotationZToRef(angle, result) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n      result._updateIdentityStatus(c === 1 && s === 0);\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the given axis\n     * @param axis defines the axis to use\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"RotationAxis\",\n    value: function RotationAxis(axis, angle) {\n      var result = new Matrix();\n      Matrix.RotationAxisToRef(axis, angle, result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n     * @param axis defines the axis to use\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"RotationAxisToRef\",\n    value: function RotationAxisToRef(axis, angle, result) {\n      var s = Math.sin(-angle);\n      var c = Math.cos(-angle);\n      var c1 = 1 - c;\n      axis.normalize();\n      var m = result._m;\n      m[0] = axis._x * axis._x * c1 + c;\n      m[1] = axis._x * axis._y * c1 - axis._z * s;\n      m[2] = axis._x * axis._z * c1 + axis._y * s;\n      m[3] = 0.0;\n      m[4] = axis._y * axis._x * c1 + axis._z * s;\n      m[5] = axis._y * axis._y * c1 + c;\n      m[6] = axis._y * axis._z * c1 - axis._x * s;\n      m[7] = 0.0;\n      m[8] = axis._z * axis._x * c1 - axis._y * s;\n      m[9] = axis._z * axis._y * c1 + axis._x * s;\n      m[10] = axis._z * axis._z * c1 + c;\n      m[11] = 0.0;\n      m[12] = 0.0;\n      m[13] = 0.0;\n      m[14] = 0.0;\n      m[15] = 1.0;\n      result.markAsUpdated();\n    }\n    /**\n     * Takes normalised vectors and returns a rotation matrix to align \"from\" with \"to\".\n     * Taken from http://www.iquilezles.org/www/articles/noacos/noacos.htm\n     * @param from defines the vector to align\n     * @param to defines the vector to align to\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"RotationAlignToRef\",\n    value: function RotationAlignToRef(from, to, result) {\n      var c = Vector3.Dot(to, from);\n      var m = result._m;\n\n      if (c < -1 + Epsilon) {\n        // from and to are colinear and opposite direction.\n        // compute a PI rotation on Z axis\n        m[0] = -1;\n        m[1] = 0;\n        m[2] = 0;\n        m[3] = 0;\n        m[4] = 0;\n        m[5] = -1;\n        m[6] = 0;\n        m[7] = 0;\n        m[8] = 0;\n        m[9] = 0;\n        m[10] = 1;\n        m[11] = 0;\n      } else {\n        var v = Vector3.Cross(to, from);\n        var k = 1 / (1 + c);\n        m[0] = v._x * v._x * k + c;\n        m[1] = v._y * v._x * k - v._z;\n        m[2] = v._z * v._x * k + v._y;\n        m[3] = 0;\n        m[4] = v._x * v._y * k + v._z;\n        m[5] = v._y * v._y * k + c;\n        m[6] = v._z * v._y * k - v._x;\n        m[7] = 0;\n        m[8] = v._x * v._z * k - v._y;\n        m[9] = v._y * v._z * k + v._x;\n        m[10] = v._z * v._z * k + c;\n        m[11] = 0;\n      }\n\n      m[12] = 0;\n      m[13] = 0;\n      m[14] = 0;\n      m[15] = 1;\n      result.markAsUpdated();\n    }\n    /**\n     * Creates a rotation matrix\n     * @param yaw defines the yaw angle in radians (Y axis)\n     * @param pitch defines the pitch angle in radians (X axis)\n     * @param roll defines the roll angle in radians (Z axis)\n     * @returns the new rotation matrix\n     */\n\n  }, {\n    key: \"RotationYawPitchRoll\",\n    value: function RotationYawPitchRoll(yaw, pitch, roll) {\n      var result = new Matrix();\n      Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n      return result;\n    }\n    /**\n     * Creates a rotation matrix and stores it in a given matrix\n     * @param yaw defines the yaw angle in radians (Y axis)\n     * @param pitch defines the pitch angle in radians (X axis)\n     * @param roll defines the roll angle in radians (Z axis)\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"RotationYawPitchRollToRef\",\n    value: function RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n      Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\n      MathTmp.Quaternion[0].toRotationMatrix(result);\n    }\n    /**\n     * Creates a scaling matrix\n     * @param x defines the scale factor on X axis\n     * @param y defines the scale factor on Y axis\n     * @param z defines the scale factor on Z axis\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"Scaling\",\n    value: function Scaling(x, y, z) {\n      var result = new Matrix();\n      Matrix.ScalingToRef(x, y, z, result);\n      return result;\n    }\n    /**\n     * Creates a scaling matrix and stores it in a given matrix\n     * @param x defines the scale factor on X axis\n     * @param y defines the scale factor on Y axis\n     * @param z defines the scale factor on Z axis\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"ScalingToRef\",\n    value: function ScalingToRef(x, y, z, result) {\n      Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n      result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n    }\n    /**\n     * Creates a translation matrix\n     * @param x defines the translation on X axis\n     * @param y defines the translation on Y axis\n     * @param z defines the translationon Z axis\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"Translation\",\n    value: function Translation(x, y, z) {\n      var result = new Matrix();\n      Matrix.TranslationToRef(x, y, z, result);\n      return result;\n    }\n    /**\n     * Creates a translation matrix and stores it in a given matrix\n     * @param x defines the translation on X axis\n     * @param y defines the translation on Y axis\n     * @param z defines the translationon Z axis\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"TranslationToRef\",\n    value: function TranslationToRef(x, y, z, result) {\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n\n      result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n    }\n    /**\n     * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n     * @param startValue defines the start value\n     * @param endValue defines the end value\n     * @param gradient defines the gradient factor\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"Lerp\",\n    value: function Lerp(startValue, endValue, gradient) {\n      var result = new Matrix();\n      Matrix.LerpToRef(startValue, endValue, gradient, result);\n      return result;\n    }\n    /**\n     * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n     * @param startValue defines the start value\n     * @param endValue defines the end value\n     * @param gradient defines the gradient factor\n     * @param result defines the Matrix object where to store data\n     */\n\n  }, {\n    key: \"LerpToRef\",\n    value: function LerpToRef(startValue, endValue, gradient, result) {\n      var resultM = result._m;\n      var startM = startValue.m;\n      var endM = endValue.m;\n\n      for (var index = 0; index < 16; index++) {\n        resultM[index] = startM[index] * (1.0 - gradient) + endM[index] * gradient;\n      }\n\n      result.markAsUpdated();\n    }\n    /**\n     * Builds a new matrix whose values are computed by:\n     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue defines the first matrix\n     * @param endValue defines the second matrix\n     * @param gradient defines the gradient between the two matrices\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"DecomposeLerp\",\n    value: function DecomposeLerp(startValue, endValue, gradient) {\n      var result = new Matrix();\n      Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n      return result;\n    }\n    /**\n     * Update a matrix to values which are computed by:\n     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue defines the first matrix\n     * @param endValue defines the second matrix\n     * @param gradient defines the gradient between the two matrices\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"DecomposeLerpToRef\",\n    value: function DecomposeLerpToRef(startValue, endValue, gradient, result) {\n      var startScale = MathTmp.Vector3[0];\n      var startRotation = MathTmp.Quaternion[0];\n      var startTranslation = MathTmp.Vector3[1];\n      startValue.decompose(startScale, startRotation, startTranslation);\n      var endScale = MathTmp.Vector3[2];\n      var endRotation = MathTmp.Quaternion[1];\n      var endTranslation = MathTmp.Vector3[3];\n      endValue.decompose(endScale, endRotation, endTranslation);\n      var resultScale = MathTmp.Vector3[4];\n      Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n      var resultRotation = MathTmp.Quaternion[2];\n      Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n      var resultTranslation = MathTmp.Vector3[5];\n      Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n      Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n     * This function works in left handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"LookAtLH\",\n    value: function LookAtLH(eye, target, up) {\n      var result = new Matrix();\n      Matrix.LookAtLHToRef(eye, target, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n     * This function works in left handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"LookAtLHToRef\",\n    value: function LookAtLHToRef(eye, target, up, result) {\n      var xAxis = MathTmp.Vector3[0];\n      var yAxis = MathTmp.Vector3[1];\n      var zAxis = MathTmp.Vector3[2]; // Z axis\n\n      target.subtractToRef(eye, zAxis);\n      zAxis.normalize(); // X axis\n\n      Vector3.CrossToRef(up, zAxis, xAxis);\n      var xSquareLength = xAxis.lengthSquared();\n\n      if (xSquareLength === 0) {\n        xAxis.x = 1.0;\n      } else {\n        xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n      } // Y axis\n\n\n      Vector3.CrossToRef(zAxis, xAxis, yAxis);\n      yAxis.normalize(); // Eye angles\n\n      var ex = -Vector3.Dot(xAxis, eye);\n      var ey = -Vector3.Dot(yAxis, eye);\n      var ez = -Vector3.Dot(zAxis, eye);\n      Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n     * This function works in right handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"LookAtRH\",\n    value: function LookAtRH(eye, target, up) {\n      var result = new Matrix();\n      Matrix.LookAtRHToRef(eye, target, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n     * This function works in right handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"LookAtRHToRef\",\n    value: function LookAtRHToRef(eye, target, up, result) {\n      var xAxis = MathTmp.Vector3[0];\n      var yAxis = MathTmp.Vector3[1];\n      var zAxis = MathTmp.Vector3[2]; // Z axis\n\n      eye.subtractToRef(target, zAxis);\n      zAxis.normalize(); // X axis\n\n      Vector3.CrossToRef(up, zAxis, xAxis);\n      var xSquareLength = xAxis.lengthSquared();\n\n      if (xSquareLength === 0) {\n        xAxis.x = 1.0;\n      } else {\n        xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n      } // Y axis\n\n\n      Vector3.CrossToRef(zAxis, xAxis, yAxis);\n      yAxis.normalize(); // Eye angles\n\n      var ex = -Vector3.Dot(xAxis, eye);\n      var ey = -Vector3.Dot(yAxis, eye);\n      var ez = -Vector3.Dot(zAxis, eye);\n      Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks in the direction specified by forward from the eye position, the up direction being oriented like \"up\".\n     * This function works in left handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"LookDirectionLH\",\n    value: function LookDirectionLH(forward, up) {\n      var result = new Matrix();\n      Matrix.LookDirectionLHToRef(forward, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks in the direction of forward, the up direction being oriented like \"up\".\n     * This function works in left handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"LookDirectionLHToRef\",\n    value: function LookDirectionLHToRef(forward, up, result) {\n      var back = MathTmp.Vector3[0];\n      back.copyFrom(forward);\n      back.scaleInPlace(-1);\n      var left = MathTmp.Vector3[1];\n      Vector3.CrossToRef(up, back, left); // Generate the rotation matrix.\n\n      Matrix.FromValuesToRef(left._x, left._y, left._z, 0.0, up._x, up._y, up._z, 0.0, back._x, back._y, back._z, 0.0, 0, 0, 0, 1.0, result);\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks in the direction specified by forward from the eye position, the up Vector3 being oriented like \"up\".\n     * This function works in right handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"LookDirectionRH\",\n    value: function LookDirectionRH(forward, up) {\n      var result = new Matrix();\n      Matrix.LookDirectionRHToRef(forward, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks in the direction of forward, the up vector3 being oriented like \"up\".\n     * This function works in right handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"LookDirectionRHToRef\",\n    value: function LookDirectionRHToRef(forward, up, result) {\n      var right = MathTmp.Vector3[2];\n      Vector3.CrossToRef(up, forward, right); // Generate the rotation matrix.\n\n      Matrix.FromValuesToRef(right._x, right._y, right._z, 0.0, up._x, up._y, up._z, 0.0, forward._x, forward._y, forward._z, 0.0, 0, 0, 0, 1.0, result);\n    }\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param width defines the viewport width\n     * @param height defines the viewport height\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n\n  }, {\n    key: \"OrthoLH\",\n    value: function OrthoLH(width, height, znear, zfar, halfZRange) {\n      var matrix = new Matrix();\n      Matrix.OrthoLHToRef(width, height, znear, zfar, matrix, halfZRange);\n      return matrix;\n    }\n    /**\n     * Store a left-handed orthographic projection to a given matrix\n     * @param width defines the viewport width\n     * @param height defines the viewport height\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     */\n\n  }, {\n    key: \"OrthoLHToRef\",\n    value: function OrthoLHToRef(width, height, znear, zfar, result, halfZRange) {\n      var n = znear;\n      var f = zfar;\n      var a = 2.0 / width;\n      var b = 2.0 / height;\n      var c = 2.0 / (f - n);\n      var d = -(f + n) / (f - n);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n    }\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n\n  }, {\n    key: \"OrthoOffCenterLH\",\n    value: function OrthoOffCenterLH(left, right, bottom, top, znear, zfar, halfZRange) {\n      var matrix = new Matrix();\n      Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix, halfZRange);\n      return matrix;\n    }\n    /**\n     * Stores a left-handed orthographic projection into a given matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     */\n\n  }, {\n    key: \"OrthoOffCenterLHToRef\",\n    value: function OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result, halfZRange) {\n      var n = znear;\n      var f = zfar;\n      var a = 2.0 / (right - left);\n      var b = 2.0 / (top - bottom);\n      var c = 2.0 / (f - n);\n      var d = -(f + n) / (f - n);\n      var i0 = (left + right) / (left - right);\n      var i1 = (top + bottom) / (bottom - top);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result.markAsUpdated();\n    }\n    /**\n     * Creates a right-handed orthographic projection matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns a new matrix as a right-handed orthographic projection matrix\n     */\n\n  }, {\n    key: \"OrthoOffCenterRH\",\n    value: function OrthoOffCenterRH(left, right, bottom, top, znear, zfar, halfZRange) {\n      var matrix = new Matrix();\n      Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix, halfZRange);\n      return matrix;\n    }\n    /**\n     * Stores a right-handed orthographic projection into a given matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     */\n\n  }, {\n    key: \"OrthoOffCenterRHToRef\",\n    value: function OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result, halfZRange) {\n      Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result, halfZRange);\n      result._m[10] *= -1; // No need to call markAsUpdated as previous function already called it and let _isIdentityDirty to true\n    }\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param width defines the viewport width\n     * @param height defines the viewport height\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n\n  }, {\n    key: \"PerspectiveLH\",\n    value: function PerspectiveLH(width, height, znear, zfar, halfZRange) {\n      var projectionPlaneTilt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var matrix = new Matrix();\n      var n = znear;\n      var f = zfar;\n      var a = 2.0 * n / width;\n      var b = 2.0 * n / height;\n      var c = (f + n) / (f - n);\n      var d = -2.0 * f * n / (f - n);\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n\n      if (halfZRange) {\n        matrix.multiplyToRef(mtxConvertNDCToHalfZRange, matrix);\n      }\n\n      matrix._updateIdentityStatus(false);\n\n      return matrix;\n    }\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n\n  }, {\n    key: \"PerspectiveFovLH\",\n    value: function PerspectiveFovLH(fov, aspect, znear, zfar, halfZRange) {\n      var projectionPlaneTilt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var reverseDepthBufferMode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var matrix = new Matrix();\n      Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix, true, halfZRange, projectionPlaneTilt, reverseDepthBufferMode);\n      return matrix;\n    }\n    /**\n     * Stores a left-handed perspective projection into a given matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     */\n\n  }, {\n    key: \"PerspectiveFovLHToRef\",\n    value: function PerspectiveFovLHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var reverseDepthBufferMode = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n      var n = znear;\n      var f = zfar;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var c = reverseDepthBufferMode && n === 0 ? -1 : f !== 0 ? (f + n) / (f - n) : 1;\n      var d = reverseDepthBufferMode && n === 0 ? 2 * f : f !== 0 ? -2.0 * f * n / (f - n) : -2 * n;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result._updateIdentityStatus(false);\n    }\n    /**\n     * Stores a left-handed perspective projection into a given matrix with depth reversed\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar not used as infinity is used as far clip\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     */\n\n  }, {\n    key: \"PerspectiveFovReverseLHToRef\",\n    value: function PerspectiveFovReverseLHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, -znear, 1.0, 0.0, 0.0, 1.0, 0.0, result);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result._updateIdentityStatus(false);\n    }\n    /**\n     * Creates a right-handed perspective projection matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     * @returns a new matrix as a right-handed perspective projection matrix\n     */\n\n  }, {\n    key: \"PerspectiveFovRH\",\n    value: function PerspectiveFovRH(fov, aspect, znear, zfar, halfZRange) {\n      var projectionPlaneTilt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var reverseDepthBufferMode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var matrix = new Matrix();\n      Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix, true, halfZRange, projectionPlaneTilt, reverseDepthBufferMode);\n      return matrix;\n    }\n    /**\n     * Stores a right-handed perspective projection into a given matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     */\n\n  }, {\n    key: \"PerspectiveFovRHToRef\",\n    value: function PerspectiveFovRHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var reverseDepthBufferMode = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n      //alternatively this could be expressed as:\n      //    m = PerspectiveFovLHToRef\n      //    m[10] *= -1.0;\n      //    m[11] *= -1.0;\n      var n = znear;\n      var f = zfar;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var c = reverseDepthBufferMode && n === 0 ? 1 : f !== 0 ? -(f + n) / (f - n) : -1;\n      var d = reverseDepthBufferMode && n === 0 ? 2 * f : f !== 0 ? -2 * f * n / (f - n) : -2 * n;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result._updateIdentityStatus(false);\n    }\n    /**\n     * Stores a right-handed perspective projection into a given matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar not used as infinity is used as far clip\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     */\n\n  }, {\n    key: \"PerspectiveFovReverseRHToRef\",\n    value: function PerspectiveFovReverseRHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, -znear, -1.0, 0.0, 0.0, -1.0, 0.0, result);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result._updateIdentityStatus(false);\n    }\n    /**\n     * Stores a perspective projection for WebVR info a given matrix\n     * @param fov defines the field of view\n     * @param fov.upDegrees\n     * @param fov.downDegrees\n     * @param fov.leftDegrees\n     * @param fov.rightDegrees\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param rightHanded defines if the matrix must be in right-handed mode (false by default)\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     */\n\n  }, {\n    key: \"PerspectiveFovWebVRToRef\",\n    value: function PerspectiveFovWebVRToRef(fov, znear, zfar, result) {\n      var rightHanded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var halfZRange = arguments.length > 5 ? arguments[5] : undefined;\n      var projectionPlaneTilt = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var rightHandedFactor = rightHanded ? -1 : 1;\n      var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n      var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n      var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n      var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n      var xScale = 2.0 / (leftTan + rightTan);\n      var yScale = 2.0 / (upTan + downTan);\n      var rot = Math.tan(projectionPlaneTilt);\n      var m = result._m;\n      m[0] = xScale;\n      m[1] = m[2] = m[3] = m[4] = 0.0;\n      m[5] = yScale;\n      m[6] = 0.0;\n      m[7] = rot;\n      m[8] = (leftTan - rightTan) * xScale * 0.5;\n      m[9] = -((upTan - downTan) * yScale * 0.5);\n      m[10] = -zfar / (znear - zfar);\n      m[11] = 1.0 * rightHandedFactor;\n      m[12] = m[13] = m[15] = 0.0;\n      m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n\n      result.markAsUpdated();\n    }\n    /**\n     * Computes a complete transformation matrix\n     * @param viewport defines the viewport to use\n     * @param world defines the world matrix\n     * @param view defines the view matrix\n     * @param projection defines the projection matrix\n     * @param zmin defines the near clip plane\n     * @param zmax defines the far clip plane\n     * @returns the transformation matrix\n     */\n\n  }, {\n    key: \"GetFinalMatrix\",\n    value: function GetFinalMatrix(viewport, world, view, projection, zmin, zmax) {\n      var cw = viewport.width;\n      var ch = viewport.height;\n      var cx = viewport.x;\n      var cy = viewport.y;\n      var viewportMatrix = Matrix.FromValues(cw / 2.0, 0.0, 0.0, 0.0, 0.0, -ch / 2.0, 0.0, 0.0, 0.0, 0.0, zmax - zmin, 0.0, cx + cw / 2.0, ch / 2.0 + cy, zmin, 1.0);\n      var matrix = MathTmp.Matrix[0];\n      world.multiplyToRef(view, matrix);\n      matrix.multiplyToRef(projection, matrix);\n      return matrix.multiply(viewportMatrix);\n    }\n    /**\n     * Extracts a 2x2 matrix from a given matrix and store the result in a Float32Array\n     * @param matrix defines the matrix to use\n     * @returns a new Float32Array array with 4 elements : the 2x2 matrix extracted from the given matrix\n     */\n\n  }, {\n    key: \"GetAsMatrix2x2\",\n    value: function GetAsMatrix2x2(matrix) {\n      var m = matrix.m;\n      var arr = [m[0], m[1], m[4], m[5]];\n      return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n    }\n    /**\n     * Extracts a 3x3 matrix from a given matrix and store the result in a Float32Array\n     * @param matrix defines the matrix to use\n     * @returns a new Float32Array array with 9 elements : the 3x3 matrix extracted from the given matrix\n     */\n\n  }, {\n    key: \"GetAsMatrix3x3\",\n    value: function GetAsMatrix3x3(matrix) {\n      var m = matrix.m;\n      var arr = [m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10]];\n      return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n    }\n    /**\n     * Compute the transpose of a given matrix\n     * @param matrix defines the matrix to transpose\n     * @returns the new matrix\n     */\n\n  }, {\n    key: \"Transpose\",\n    value: function Transpose(matrix) {\n      var result = new Matrix();\n      Matrix.TransposeToRef(matrix, result);\n      return result;\n    }\n    /**\n     * Compute the transpose of a matrix and store it in a target matrix\n     * @param matrix defines the matrix to transpose\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"TransposeToRef\",\n    value: function TransposeToRef(matrix, result) {\n      var rm = result._m;\n      var mm = matrix.m;\n      rm[0] = mm[0];\n      rm[1] = mm[4];\n      rm[2] = mm[8];\n      rm[3] = mm[12];\n      rm[4] = mm[1];\n      rm[5] = mm[5];\n      rm[6] = mm[9];\n      rm[7] = mm[13];\n      rm[8] = mm[2];\n      rm[9] = mm[6];\n      rm[10] = mm[10];\n      rm[11] = mm[14];\n      rm[12] = mm[3];\n      rm[13] = mm[7];\n      rm[14] = mm[11];\n      rm[15] = mm[15];\n      result.markAsUpdated(); // identity-ness does not change when transposing\n\n      result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n    }\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane defines the reflection plane\n     * @returns a new matrix\n     */\n\n  }, {\n    key: \"Reflection\",\n    value: function Reflection(plane) {\n      var matrix = new Matrix();\n      Matrix.ReflectionToRef(plane, matrix);\n      return matrix;\n    }\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane defines the reflection plane\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"ReflectionToRef\",\n    value: function ReflectionToRef(plane, result) {\n      plane.normalize();\n      var x = plane.normal.x;\n      var y = plane.normal.y;\n      var z = plane.normal.z;\n      var temp = -2 * x;\n      var temp2 = -2 * y;\n      var temp3 = -2 * z;\n      Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n    }\n    /**\n     * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n     * @param xaxis defines the value of the 1st axis\n     * @param yaxis defines the value of the 2nd axis\n     * @param zaxis defines the value of the 3rd axis\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"FromXYZAxesToRef\",\n    value: function FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {\n      Matrix.FromValuesToRef(xaxis._x, xaxis._y, xaxis._z, 0.0, yaxis._x, yaxis._y, yaxis._z, 0.0, zaxis._x, zaxis._y, zaxis._z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n    }\n    /**\n     * Creates a rotation matrix from a quaternion and stores it in a target matrix\n     * @param quat defines the quaternion to use\n     * @param result defines the target matrix\n     */\n\n  }, {\n    key: \"FromQuaternionToRef\",\n    value: function FromQuaternionToRef(quat, result) {\n      var xx = quat._x * quat._x;\n      var yy = quat._y * quat._y;\n      var zz = quat._z * quat._z;\n      var xy = quat._x * quat._y;\n      var zw = quat._z * quat._w;\n      var zx = quat._z * quat._x;\n      var yw = quat._y * quat._w;\n      var yz = quat._y * quat._z;\n      var xw = quat._x * quat._w;\n      result._m[0] = 1.0 - 2.0 * (yy + zz);\n      result._m[1] = 2.0 * (xy + zw);\n      result._m[2] = 2.0 * (zx - yw);\n      result._m[3] = 0.0;\n      result._m[4] = 2.0 * (xy - zw);\n      result._m[5] = 1.0 - 2.0 * (zz + xx);\n      result._m[6] = 2.0 * (yz + xw);\n      result._m[7] = 0.0;\n      result._m[8] = 2.0 * (zx + yw);\n      result._m[9] = 2.0 * (yz - xw);\n      result._m[10] = 1.0 - 2.0 * (yy + xx);\n      result._m[11] = 0.0;\n      result._m[12] = 0.0;\n      result._m[13] = 0.0;\n      result._m[14] = 0.0;\n      result._m[15] = 1.0;\n      result.markAsUpdated();\n    }\n  }]);\n\n  return Matrix;\n}();\nMatrix._UpdateFlagSeed = 0;\nMatrix._IdentityReadOnly = Matrix.Identity();\n/**\n * @internal\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n */\n\nvar MathTmp = /*#__PURE__*/_createClass(function MathTmp() {\n  _classCallCheck(this, MathTmp);\n});\n\nMathTmp.Vector3 = ArrayTools.BuildTuple(11, Vector3.Zero);\nMathTmp.Matrix = ArrayTools.BuildTuple(2, Matrix.Identity);\nMathTmp.Quaternion = ArrayTools.BuildTuple(3, Quaternion.Zero);\n/**\n * @internal\n */\n\nexport var TmpVectors = /*#__PURE__*/_createClass(function TmpVectors() {\n  _classCallCheck(this, TmpVectors);\n});\nTmpVectors.Vector2 = ArrayTools.BuildTuple(3, Vector2.Zero); // 3 temp Vector2 at once should be enough\n\nTmpVectors.Vector3 = ArrayTools.BuildTuple(13, Vector3.Zero); // 13 temp Vector3 at once should be enough\n\nTmpVectors.Vector4 = ArrayTools.BuildTuple(3, Vector4.Zero); // 3 temp Vector4 at once should be enough\n\nTmpVectors.Quaternion = ArrayTools.BuildTuple(2, Quaternion.Zero); // 2 temp Quaternion at once should be enough\n\nTmpVectors.Matrix = ArrayTools.BuildTuple(8, Matrix.Identity); // 8 temp Matrices at once should be enough\n\nRegisterClass(\"BABYLON.Vector2\", Vector2);\nRegisterClass(\"BABYLON.Vector3\", Vector3);\nRegisterClass(\"BABYLON.Vector4\", Vector4);\nRegisterClass(\"BABYLON.Matrix\", Matrix);\nvar mtxConvertNDCToHalfZRange = Matrix.FromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 1);"],"names":["_ExtractAsInt","value","parseInt","toString","replace","Vector2","x","arguments","length","undefined","y","this","key","concat","hash","array","index","FromArrayToRef","result","Array","toArray","source","copyFromFloats","otherVector","divideToRef","scale","_scale","scaleToRef","epsilon","Math","floor","angle","cos","sin","sqrt","NormalizeToRef","get","_ZeroReadOnly","offset","value1","value2","value3","value4","amount","squared","cubed","min","max","tangent1","tangent2","part1","part2","part3","part4","time","Zero","Hermite1stDerivativeToRef","t2","start","end","left","right","vector","newVector","len","transformation","r","TransformToRef","m","p","p0","p1","p2","a","sign","s","t","DistanceSquared","CenterToRef","ref","segA","segB","l2","Distance","v","subtract","Dot","proj","add","multiplyByFloats","Vector3","z","_isDirty","_x","_y","_z","set","Quaternion","RotationYawPitchRoll","addInPlaceFromFloats","subtractFromFloatsToRef","_scale2","q","ix","w","iy","iz","iw","applyRotationQuaternionToRef","plane","origin","projectOnPlaneToRef","n","normal","d","V","MathTmp","subtractToRef","normalize","denom","abs","pow","setAll","Infinity","scaledV","scaleInPlace","addToRef","other","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","absX","absY","absZ","normalizeFromLength","order","_this","toLowerCase","copyFrom","forEach","val","i","quaternion","toRotationMatrix","Matrix","TransformCoordinatesToRef","point","rotateByQuaternionToRef","Cross","normalized","normalizeToRef","reference","vector0","vector1","axis","size","d0","v0","v1","dot","acos","CrossToRef","isNaN","PI","vNormal","forward","atan2","slerp","vector0Dir","vector1Dir","vector0Length","vector1Length","scale0","scale1","omega","invSin","addInPlace","goal","deltaTime","lerpTime","SlerpToRef","FromArray","_UpReadOnly","_DownReadOnly","_RightReadOnly","_LeftReadOnly","_LeftHandedForwardReadOnly","_RightHandedForwardReadOnly","rightHandedSystem","TransformCoordinatesFromFloatsToRef","rx","ry","rz","rw","TransformNormalToRef","TransformNormalFromFloatsToRef","ClampToRef","minimizeInPlace","maximizeInPlace","LerpToRef","world","transform","viewport","ProjectToRef","cw","width","ch","height","cx","cy","viewportMatrix","FromValuesToRef","matrix","multiplyToRef","num","viewportWidth","viewportHeight","Unproject","IdentityReadOnly","view","projection","UnprojectToRef","UnprojectFloatsToRef","sourceX","sourceY","sourceZ","_EngineStore$LastCrea","invert","screenSource","isNDCHalfZRange","_UnprojectFromInvertedMatrixToRef","clone","p1p0","p2p0","p2p1","vectorp0","p1p0L","p2p0L","p2p1L","nl","l","cosA","projVector","v2","tmp","projP","subtractInPlace","s0","s1","e0","e1","s2","edge","tmp2","tmp3","e0proj","e0projL","cosG","triProj","axis1","axis2","axis3","rotation","RotationFromAxisToRef","quat","RotationQuaternionFromAxisToRef","toEulerAnglesToRef","Up","Down","Forward","Right","Left","Vector4","_scale3","_w","otherQuaternion","q1","conjugate","lengthSquared","conjugateInPlace","inv","qz","qx","qy","qw","zAxisY","limit","sqw","sqz","sqx","sqy","asin","FromQuaternionToRef","FromRotationMatrixToRef","data","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","quat0","quat1","RotationAxisToRef","RotationYawPitchRollToRef","vec","vecFrom","vecTo","TmpVectors","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","alpha","beta","gamma","RotationAlphaBetaGammaToRef","halfGammaPlusAlpha","halfGammaMinusAlpha","halfBeta","rotMat","FromXYZAxesToRef","up","FromLookDirectionLHToRef","LookDirectionLHToRef","FromLookDirectionRHToRef","LookDirectionRHToRef","Identity","num2","num3","num4","flag","num5","num6","_isIdentity","_isIdentityDirty","_isIdentity3x2","_isIdentity3x2Dirty","updateFlag","_m","markAsUpdated","_UpdateFlagSeed","isIdentity","isIdentityDirty","isIdentity3x2","isIdentity3x2Dirty","m00","m01","m02","m03","m10","m20","m30","det_22_33","det_21_33","det_21_32","det_20_33","det_20_32","det_20_31","invertToRef","_updateIdentityStatus","resultM","otherM","IdentityToRef","cofact_00","cofact_01","cofact_02","cofact_03","det","detInv","det_12_33","det_11_33","det_11_32","det_10_33","det_10_32","det_10_31","det_12_23","det_11_23","det_11_22","det_10_23","det_10_22","det_10_21","cofact_10","cofact_11","cofact_12","cofact_13","cofact_20","cofact_21","cofact_22","cofact_23","cofact_30","cofact_31","cofact_32","cofact_33","vector3","setTranslationFromFloats","copyToArray","o","multiplyToArray","tm0","tm1","tm2","tm3","tm4","tm5","tm6","tm7","tm8","tm9","tm10","tm11","tm12","tm13","tm14","tm15","om0","om1","om2","om3","om4","om5","om6","om7","om8","om9","om10","om11","om12","om13","om14","om15","om","node","rotationQuaternion","decompose","scaling","position","translation","preserveScalingNode","signX","signY","signZ","determinant","sx","sy","sz","rowVector","row","setRowFromFloats","Transpose","TransposeToRef","_scale4","transposeToRef","getRotationMatrixToRef","_IdentityReadOnly","initialM11","initialM12","initialM13","initialM14","initialM21","initialM22","initialM23","initialM24","initialM31","initialM32","initialM33","initialM34","initialM41","initialM42","initialM43","initialM44","ComposeToRef","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","identity","FromValues","zero","RotationXToRef","c","RotationYToRef","RotationZToRef","c1","from","to","k","ScalingToRef","TranslationToRef","startValue","endValue","gradient","startM","endM","DecomposeLerpToRef","startScale","startRotation","startTranslation","endScale","endRotation","endTranslation","resultScale","resultRotation","resultTranslation","eye","target","LookAtLHToRef","xAxis","yAxis","zAxis","xSquareLength","ex","ey","ez","LookAtRHToRef","back","znear","zfar","halfZRange","OrthoLHToRef","b","mtxConvertNDCToHalfZRange","bottom","top","OrthoOffCenterLHToRef","i0","i1","OrthoOffCenterRHToRef","projectionPlaneTilt","f","rot","tan","fov","aspect","reverseDepthBufferMode","PerspectiveFovLHToRef","isVerticalFovFixed","PerspectiveFovRHToRef","rightHanded","rightHandedFactor","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","zmin","zmax","multiply","arr","Float32Array","rm","mm","ReflectionToRef","temp","temp2","temp3","xaxis","yaxis","zaxis","zw","zx","yw","xw"],"sourceRoot":""}